{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quant\\\\Documents\\\\Programming\\\\Projects\\\\Hackathon\\\\MakeUofT\\\\frontend\\\\src\\\\components\\\\PoseTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTracker = ({\n  userPreferences\n}) => {\n  _s();\n  var _selectedPose$name;\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const poseRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poseAccuracy, setPoseAccuracy] = useState(0);\n  const [segmentAccuracies, setSegmentAccuracies] = useState({});\n  const [poseFeedback, setPoseFeedback] = useState('');\n  const [wsConnection, setWsConnection] = useState(null);\n  const [selectedPose, setSelectedPose] = useState(null);\n\n  // New state variables for pose cycling\n  const [availablePoses, setAvailablePoses] = useState([]);\n  const [currentPoseIndex, setCurrentPoseIndex] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(15);\n  const [isSessionComplete, setIsSessionComplete] = useState(false);\n  const [totalPosesCompleted, setTotalPosesCompleted] = useState(0);\n\n  // Constants\n  const POSE_DURATION = 15; // seconds\n  const poseNames = ['crescent-lunge', 'dancers-pose', 'high-plank-pose', 'mountain-pose', 'seated-forward-fold', 'tree-pose', 'triangle-pose', 'upward-facing-dog'];\n  const videoConstraints = {\n    width: 640,\n    height: 480,\n    facingMode: 'user'\n  };\n  const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n    if (!targetPose || !userLandmarks) return {\n      total: 0,\n      segments: {}\n    };\n\n    // Define body segments with their corresponding landmark indices\n    const bodySegments = {\n      head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      upperBody: [11, 12, 13, 14, 15, 16],\n      // shoulders, elbows, wrists\n      torso: [11, 12, 23, 24],\n      // shoulders to hips\n      lowerBody: [23, 24, 25, 26, 27, 28] // hips to ankles\n    };\n\n    // Define key points that must be visible for each segment\n    const requiredPoints = {\n      head: [0, 1, 4],\n      // Nose and eyes\n      upperBody: [11, 12],\n      // Shoulders\n      torso: [11, 12, 23, 24],\n      // Shoulders and hips\n      lowerBody: [23, 24, 25, 26] // Hips and knees\n    };\n\n    // Helper function to normalize pose relative to shoulders\n    const normalizePose = landmarks => {\n      const leftShoulder = landmarks[11];\n      const rightShoulder = landmarks[12];\n      const shoulderCenterX = (leftShoulder.x + rightShoulder.x) / 2;\n      const shoulderCenterY = (leftShoulder.y + rightShoulder.y) / 2;\n      const shoulderWidth = Math.sqrt(Math.pow(rightShoulder.x - leftShoulder.x, 2) + Math.pow(rightShoulder.y - leftShoulder.y, 2));\n      return landmarks.map(landmark => ({\n        x: (landmark.x - shoulderCenterX) / shoulderWidth,\n        y: (landmark.y - shoulderCenterY) / shoulderWidth,\n        visibility: landmark.visibility\n      }));\n    };\n\n    // Normalize both poses\n    const normalizedUser = normalizePose(userLandmarks);\n    const normalizedTarget = normalizePose(targetPose.landmarks);\n    let segmentAccuracies = {};\n    let visibleSegments = 0;\n\n    // Calculate accuracy for each body segment\n    for (const [segment, points] of Object.entries(bodySegments)) {\n      // Check if required points are visible\n      const requiredVisible = requiredPoints[segment].every(index => {\n        const userPoint = normalizedUser[index];\n        const targetPoint = normalizedTarget[index];\n        return userPoint.visibility > 0.5 && targetPoint.visibility > 0.5;\n      });\n      if (!requiredVisible) {\n        continue; // Skip this segment if required points aren't visible\n      }\n      let segmentTotal = 0;\n      let segmentPoints = 0;\n\n      // Calculate accuracies for points\n      points.forEach(index => {\n        const userLandmark = normalizedUser[index];\n        const targetLandmark = normalizedTarget[index];\n\n        // Check if point is visible enough in both poses\n        if (userLandmark.visibility > 0.5 && targetLandmark.visibility > 0.5) {\n          // Calculate angle between points relative to shoulder center\n          const userAngle = Math.atan2(userLandmark.y, userLandmark.x);\n          const targetAngle = Math.atan2(targetLandmark.y, targetLandmark.x);\n          const angleDiff = Math.abs(userAngle - targetAngle);\n\n          // Calculate position difference\n          const distance = Math.sqrt(Math.pow(userLandmark.x - targetLandmark.x, 2) + Math.pow(userLandmark.y - targetLandmark.y, 2));\n\n          // Combine angle and distance accuracy\n          const angleAccuracy = Math.max(0, 1 - angleDiff / Math.PI);\n          const distanceAccuracy = Math.max(0, 1 - distance / 0.5);\n          const pointAccuracy = angleAccuracy * 0.7 + distanceAccuracy * 0.3;\n\n          // Add to segment total with visibility weight\n          const weight = Math.min(userLandmark.visibility, targetLandmark.visibility);\n          segmentTotal += pointAccuracy * weight;\n          segmentPoints += weight;\n        }\n      });\n\n      // Calculate segment accuracy if we have points\n      if (segmentPoints > 0) {\n        const rawAccuracy = segmentTotal / segmentPoints * 100;\n        segmentAccuracies[segment] = {\n          accuracy: Math.min(100, Math.max(0, rawAccuracy)),\n          visibility: segmentPoints / points.length\n        };\n        visibleSegments++;\n      }\n    }\n\n    // Calculate overall accuracy\n    if (visibleSegments === 0) return {\n      total: 0,\n      segments: {}\n    };\n    let totalAccuracy = 0;\n    let totalWeight = 0;\n\n    // Weight segments differently\n    const segmentWeights = {\n      head: 1,\n      upperBody: 1.2,\n      torso: 1.2,\n      lowerBody: 1\n    };\n    for (const [segment, data] of Object.entries(segmentAccuracies)) {\n      const weight = segmentWeights[segment] * data.visibility;\n      totalAccuracy += data.accuracy * weight;\n      totalWeight += weight;\n    }\n    return {\n      total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n      segments: segmentAccuracies\n    };\n  };\n  const onResults = useCallback(results => {\n    if (!canvasRef.current || !results.poseLandmarks) return;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext('2d');\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas dimensions to match video\n    canvasElement.width = videoWidth;\n    canvasElement.height = videoHeight;\n\n    // Calculate pose accuracy if we have a selected pose\n    if (selectedPose && selectedPose.landmarks) {\n      const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n      setPoseAccuracy(accuracyData.total);\n      setSegmentAccuracies(accuracyData.segments);\n    }\n\n    // Clear canvas\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    // Draw pose landmarks\n    if (results.poseLandmarks) {\n      canvasCtx.save();\n      canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n      // Mirror the canvas context\n      canvasCtx.scale(-1, 1);\n      canvasCtx.translate(-videoWidth, 0);\n\n      // Draw connectors\n      canvasCtx.lineWidth = 3;\n\n      // Draw pose connections\n      function drawConnection(landmarks, start, end, color) {\n        const startPoint = landmarks[start];\n        const endPoint = landmarks[end];\n        if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n          canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n          canvasCtx.strokeStyle = color;\n          canvasCtx.stroke();\n        }\n      }\n      const landmarks = results.poseLandmarks;\n\n      // Draw body parts with different colors\n      // Upper body (green)\n      const upperBodyColor = '#00FF00';\n      drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\n      drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n      drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n      drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n      drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n\n      // Head (red)\n      const headColor = '#FF0000';\n      drawConnection(landmarks, 0, 1, headColor);\n      drawConnection(landmarks, 1, 2, headColor);\n      drawConnection(landmarks, 2, 3, headColor);\n      drawConnection(landmarks, 3, 7, headColor);\n      drawConnection(landmarks, 0, 4, headColor);\n      drawConnection(landmarks, 4, 5, headColor);\n      drawConnection(landmarks, 5, 6, headColor);\n      drawConnection(landmarks, 6, 8, headColor);\n\n      // Torso (blue)\n      const torsoColor = '#0000FF';\n      drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n      drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n      drawConnection(landmarks, 23, 24, torsoColor); // hips\n\n      // Lower body (yellow)\n      const lowerBodyColor = '#FFFF00';\n      drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n      drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n      drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n      drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n\n      // Draw landmarks\n      landmarks.forEach((landmark, index) => {\n        if (landmark.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.arc(landmark.x * videoWidth, landmark.y * videoHeight, 5, 0, 2 * Math.PI);\n          canvasCtx.fillStyle = '#FFFFFF';\n          canvasCtx.fill();\n          canvasCtx.strokeStyle = '#000000';\n          canvasCtx.stroke();\n        }\n      });\n      canvasCtx.restore();\n    }\n  }, [selectedPose]);\n  useEffect(() => {\n    const loadPoses = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Default to 1 pose if no preferences\n        const count = (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.poseCount) || 1;\n        console.log('Loading poses with count:', count);\n\n        // Load all poses up to the user's poseCount\n        const posesToLoad = poseNames.slice(0, count);\n        console.log('Poses to load:', posesToLoad);\n        const loadedPoses = await Promise.all(posesToLoad.map(async poseName => {\n          try {\n            const response = await fetch(`/pose_results/${poseName}_pose.json`);\n            if (!response.ok) {\n              throw new Error(`Failed to load pose: ${poseName}`);\n            }\n            const poseData = await response.json();\n            return {\n              ...poseData,\n              name: poseName\n            };\n          } catch (err) {\n            console.error(`Error loading pose ${poseName}:`, err);\n            throw err;\n          }\n        }));\n        console.log('Loaded poses:', loadedPoses);\n        setAvailablePoses(loadedPoses);\n        if (loadedPoses.length > 0) {\n          setSelectedPose(loadedPoses[0]);\n        }\n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error loading pose data:', err);\n        setError('Failed to load pose data. Please check your internet connection and try again.');\n        setIsLoading(false);\n      }\n    };\n    if (userPreferences) {\n      loadPoses();\n    }\n  }, [userPreferences]);\n  useEffect(() => {\n    let pose = null;\n    let camera = null;\n    const initializePose = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Create a new Pose instance\n        pose = new Pose({\n          locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n          }\n        });\n\n        // Configure pose options\n        pose.setOptions({\n          modelComplexity: 1,\n          smoothLandmarks: true,\n          enableSegmentation: false,\n          smoothSegmentation: false,\n          minDetectionConfidence: 0.5,\n          minTrackingConfidence: 0.5\n        });\n\n        // Wait for the pose model to be ready\n        await pose.initialize();\n        pose.onResults(onResults);\n        if (webcamRef.current && webcamRef.current.video) {\n          camera = new Camera(webcamRef.current.video, {\n            onFrame: async () => {\n              if (webcamRef.current && webcamRef.current.video) {\n                await pose.send({\n                  image: webcamRef.current.video\n                });\n              }\n            },\n            width: 640,\n            height: 480\n          });\n          await camera.start();\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Error initializing pose detection:', err);\n        setError('Failed to initialize pose detection. Please ensure you have granted camera permissions and try again.');\n        setIsLoading(false);\n      }\n    };\n\n    // Initialize pose detection after a short delay to ensure webcam is ready\n    const timeoutId = setTimeout(() => {\n      if (webcamRef.current && webcamRef.current.video) {\n        initializePose();\n      }\n    }, 1000);\n    return () => {\n      clearTimeout(timeoutId);\n      if (camera) {\n        camera.stop();\n      }\n      if (pose) {\n        pose.close();\n      }\n    };\n  }, [onResults]);\n  useEffect(() => {\n    // Initialize WebSocket connection\n    const ws = new WebSocket('ws://localhost:8000/ws/pose-feedback');\n    ws.onopen = () => {\n      console.log('Connected to feedback server');\n      setWsConnection(ws);\n    };\n    ws.onmessage = event => {\n      setPoseFeedback(event.data);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Send pose data to backend when accuracy updates\n  useEffect(() => {\n    if (wsConnection && selectedPose && Object.keys(segmentAccuracies).length > 0) {\n      const poseData = {\n        pose_name: selectedPose.name || 'unknown pose',\n        overall_accuracy: poseAccuracy,\n        segment_accuracies: segmentAccuracies\n      };\n      wsConnection.send(JSON.stringify(poseData));\n    }\n  }, [poseAccuracy, segmentAccuracies, selectedPose, wsConnection]);\n\n  // Timer effect for pose cycling\n  useEffect(() => {\n    if (!availablePoses.length || isSessionComplete) return;\n    const timer = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // Time to switch poses\n          setCurrentPoseIndex(currentIndex => {\n            const nextIndex = currentIndex + 1;\n            if (nextIndex >= availablePoses.length) {\n              setIsSessionComplete(true);\n              return currentIndex;\n            }\n            setSelectedPose(availablePoses[nextIndex]);\n            setTotalPosesCompleted(prev => prev + 1);\n            return nextIndex;\n          });\n          return POSE_DURATION;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [availablePoses, isSessionComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pose-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pose-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pose Tracking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }, this), !isSessionComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pose-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Current Pose: \", selectedPose === null || selectedPose === void 0 ? void 0 : (_selectedPose$name = selectedPose.name) === null || _selectedPose$name === void 0 ? void 0 : _selectedPose$name.replace(/-/g, ' ').replace(/_pose$/, '')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: [\"Time Remaining: \", timeRemaining, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          children: [\"Pose \", currentPoseIndex + 1, \" of \", availablePoses.length || (userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.poseCount) || 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"session-complete\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Session Complete!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You completed \", totalPosesCompleted, \" poses\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pose-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"webcam-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"webcam-container\",\n          children: [/*#__PURE__*/_jsxDEV(Webcam, {\n            ref: webcamRef,\n            videoConstraints: videoConstraints,\n            style: {\n              display: 'block'\n            },\n            mirrored: true,\n            onUserMediaError: err => {\n              console.error('Webcam error:', err);\n              setError('Failed to access camera. Please ensure you have granted camera permissions.');\n              setIsLoading(false);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            className: \"pose-canvas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 25\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading pose detection...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accuracy-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Overall Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accuracy-value\",\n            children: [poseAccuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment-accuracies\",\n          children: Object.entries(segmentAccuracies).map(([segment, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"segment-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: segment.replace(/([A-Z])/g, ' $1').trim()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"accuracy-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accuracy-fill\",\n                style: {\n                  width: `${data.accuracy}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 33\n            }, this)]\n          }, segment, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 21\n        }, this), poseFeedback && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedback-message\",\n          children: poseFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-button\",\n        onClick: () => {\n          setError(null);\n          window.location.reload();\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 9\n  }, this);\n};\n_s(PoseTracker, \"CJKCKmTNrEGxaKUZEJu0JyxydWQ=\");\n_c = PoseTracker;\nexport default PoseTracker;\nvar _c;\n$RefreshReg$(_c, \"PoseTracker\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Webcam","Camera","Pose","jsxDEV","_jsxDEV","PoseTracker","userPreferences","_s","_selectedPose$name","webcamRef","canvasRef","poseRef","isLoading","setIsLoading","error","setError","poseAccuracy","setPoseAccuracy","segmentAccuracies","setSegmentAccuracies","poseFeedback","setPoseFeedback","wsConnection","setWsConnection","selectedPose","setSelectedPose","availablePoses","setAvailablePoses","currentPoseIndex","setCurrentPoseIndex","timeRemaining","setTimeRemaining","isSessionComplete","setIsSessionComplete","totalPosesCompleted","setTotalPosesCompleted","POSE_DURATION","poseNames","videoConstraints","width","height","facingMode","calculatePoseAccuracy","userLandmarks","targetPose","total","segments","bodySegments","head","upperBody","torso","lowerBody","requiredPoints","normalizePose","landmarks","leftShoulder","rightShoulder","shoulderCenterX","x","shoulderCenterY","y","shoulderWidth","Math","sqrt","pow","map","landmark","visibility","normalizedUser","normalizedTarget","visibleSegments","segment","points","Object","entries","requiredVisible","every","index","userPoint","targetPoint","segmentTotal","segmentPoints","forEach","userLandmark","targetLandmark","userAngle","atan2","targetAngle","angleDiff","abs","distance","angleAccuracy","max","PI","distanceAccuracy","pointAccuracy","weight","min","rawAccuracy","accuracy","length","totalAccuracy","totalWeight","segmentWeights","data","round","onResults","results","current","poseLandmarks","canvasElement","canvasCtx","getContext","videoWidth","video","videoHeight","accuracyData","clearRect","save","scale","translate","lineWidth","drawConnection","start","end","color","startPoint","endPoint","beginPath","moveTo","lineTo","strokeStyle","stroke","upperBodyColor","headColor","torsoColor","lowerBodyColor","arc","fillStyle","fill","restore","loadPoses","count","poseCount","console","log","posesToLoad","slice","loadedPoses","Promise","all","poseName","response","fetch","ok","Error","poseData","json","name","err","pose","camera","initializePose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","initialize","onFrame","send","image","timeoutId","setTimeout","clearTimeout","stop","close","ws","WebSocket","onopen","onmessage","event","onerror","keys","pose_name","overall_accuracy","segment_accuracies","JSON","stringify","timer","setInterval","prev","currentIndex","nextIndex","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","replace","ref","style","display","mirrored","onUserMediaError","trim","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["C:/Users/Quant/Documents/Programming/Projects/Hackathon/MakeUofT/frontend/src/components/PoseTracker.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport { Camera } from '@mediapipe/camera_utils';\r\nimport { Pose } from '@mediapipe/pose';\r\nimport './PoseTracker.css';\r\n\r\nconst PoseTracker = ({ userPreferences }) => {\r\n    const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const poseRef = useRef(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [poseAccuracy, setPoseAccuracy] = useState(0);\r\n    const [segmentAccuracies, setSegmentAccuracies] = useState({});\r\n    const [poseFeedback, setPoseFeedback] = useState('');\r\n    const [wsConnection, setWsConnection] = useState(null);\r\n    const [selectedPose, setSelectedPose] = useState(null);\r\n\r\n    // New state variables for pose cycling\r\n    const [availablePoses, setAvailablePoses] = useState([]);\r\n    const [currentPoseIndex, setCurrentPoseIndex] = useState(0);\r\n    const [timeRemaining, setTimeRemaining] = useState(15);\r\n    const [isSessionComplete, setIsSessionComplete] = useState(false);\r\n    const [totalPosesCompleted, setTotalPosesCompleted] = useState(0);\r\n\r\n    // Constants\r\n    const POSE_DURATION = 15; // seconds\r\n    const poseNames = [\r\n        'crescent-lunge',\r\n        'dancers-pose',\r\n        'high-plank-pose',\r\n        'mountain-pose',\r\n        'seated-forward-fold',\r\n        'tree-pose',\r\n        'triangle-pose',\r\n        'upward-facing-dog'\r\n    ];\r\n\r\n    const videoConstraints = {\r\n        width: 640,\r\n        height: 480,\r\n        facingMode: 'user',\r\n    };\r\n\r\n    const calculatePoseAccuracy = (userLandmarks, targetPose) => {\r\n        if (!targetPose || !userLandmarks) return { total: 0, segments: {} };\r\n\r\n        // Define body segments with their corresponding landmark indices\r\n        const bodySegments = {\r\n            head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            upperBody: [11, 12, 13, 14, 15, 16], // shoulders, elbows, wrists\r\n            torso: [11, 12, 23, 24], // shoulders to hips\r\n            lowerBody: [23, 24, 25, 26, 27, 28] // hips to ankles\r\n        };\r\n\r\n        // Define key points that must be visible for each segment\r\n        const requiredPoints = {\r\n            head: [0, 1, 4], // Nose and eyes\r\n            upperBody: [11, 12], // Shoulders\r\n            torso: [11, 12, 23, 24], // Shoulders and hips\r\n            lowerBody: [23, 24, 25, 26] // Hips and knees\r\n        };\r\n\r\n        // Helper function to normalize pose relative to shoulders\r\n        const normalizePose = (landmarks) => {\r\n            const leftShoulder = landmarks[11];\r\n            const rightShoulder = landmarks[12];\r\n\r\n            const shoulderCenterX = (leftShoulder.x + rightShoulder.x) / 2;\r\n            const shoulderCenterY = (leftShoulder.y + rightShoulder.y) / 2;\r\n            const shoulderWidth = Math.sqrt(\r\n                Math.pow(rightShoulder.x - leftShoulder.x, 2) +\r\n                Math.pow(rightShoulder.y - leftShoulder.y, 2)\r\n            );\r\n\r\n            return landmarks.map(landmark => ({\r\n                x: (landmark.x - shoulderCenterX) / shoulderWidth,\r\n                y: (landmark.y - shoulderCenterY) / shoulderWidth,\r\n                visibility: landmark.visibility\r\n            }));\r\n        };\r\n\r\n        // Normalize both poses\r\n        const normalizedUser = normalizePose(userLandmarks);\r\n        const normalizedTarget = normalizePose(targetPose.landmarks);\r\n\r\n        let segmentAccuracies = {};\r\n        let visibleSegments = 0;\r\n\r\n        // Calculate accuracy for each body segment\r\n        for (const [segment, points] of Object.entries(bodySegments)) {\r\n            // Check if required points are visible\r\n            const requiredVisible = requiredPoints[segment].every(index => {\r\n                const userPoint = normalizedUser[index];\r\n                const targetPoint = normalizedTarget[index];\r\n                return userPoint.visibility > 0.5 && targetPoint.visibility > 0.5;\r\n            });\r\n\r\n            if (!requiredVisible) {\r\n                continue; // Skip this segment if required points aren't visible\r\n            }\r\n\r\n            let segmentTotal = 0;\r\n            let segmentPoints = 0;\r\n\r\n            // Calculate accuracies for points\r\n            points.forEach(index => {\r\n                const userLandmark = normalizedUser[index];\r\n                const targetLandmark = normalizedTarget[index];\r\n\r\n                // Check if point is visible enough in both poses\r\n                if (userLandmark.visibility > 0.5 && targetLandmark.visibility > 0.5) {\r\n                    // Calculate angle between points relative to shoulder center\r\n                    const userAngle = Math.atan2(userLandmark.y, userLandmark.x);\r\n                    const targetAngle = Math.atan2(targetLandmark.y, targetLandmark.x);\r\n                    const angleDiff = Math.abs(userAngle - targetAngle);\r\n\r\n                    // Calculate position difference\r\n                    const distance = Math.sqrt(\r\n                        Math.pow(userLandmark.x - targetLandmark.x, 2) +\r\n                        Math.pow(userLandmark.y - targetLandmark.y, 2)\r\n                    );\r\n\r\n                    // Combine angle and distance accuracy\r\n                    const angleAccuracy = Math.max(0, 1 - (angleDiff / Math.PI));\r\n                    const distanceAccuracy = Math.max(0, 1 - (distance / 0.5));\r\n                    const pointAccuracy = (angleAccuracy * 0.7 + distanceAccuracy * 0.3);\r\n\r\n                    // Add to segment total with visibility weight\r\n                    const weight = Math.min(userLandmark.visibility, targetLandmark.visibility);\r\n                    segmentTotal += pointAccuracy * weight;\r\n                    segmentPoints += weight;\r\n                }\r\n            });\r\n\r\n            // Calculate segment accuracy if we have points\r\n            if (segmentPoints > 0) {\r\n                const rawAccuracy = (segmentTotal / segmentPoints) * 100;\r\n                segmentAccuracies[segment] = {\r\n                    accuracy: Math.min(100, Math.max(0, rawAccuracy)),\r\n                    visibility: segmentPoints / points.length\r\n                };\r\n                visibleSegments++;\r\n            }\r\n        }\r\n\r\n        // Calculate overall accuracy\r\n        if (visibleSegments === 0) return { total: 0, segments: {} };\r\n\r\n        let totalAccuracy = 0;\r\n        let totalWeight = 0;\r\n\r\n        // Weight segments differently\r\n        const segmentWeights = {\r\n            head: 1,\r\n            upperBody: 1.2,\r\n            torso: 1.2,\r\n            lowerBody: 1\r\n        };\r\n\r\n        for (const [segment, data] of Object.entries(segmentAccuracies)) {\r\n            const weight = segmentWeights[segment] * data.visibility;\r\n            totalAccuracy += data.accuracy * weight;\r\n            totalWeight += weight;\r\n        }\r\n\r\n        return {\r\n            total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\r\n            segments: segmentAccuracies\r\n        };\r\n    };\r\n\r\n    const onResults = useCallback((results) => {\r\n        if (!canvasRef.current || !results.poseLandmarks) return;\r\n\r\n        const canvasElement = canvasRef.current;\r\n        const canvasCtx = canvasElement.getContext('2d');\r\n        const videoWidth = webcamRef.current.video.videoWidth;\r\n        const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n        // Set canvas dimensions to match video\r\n        canvasElement.width = videoWidth;\r\n        canvasElement.height = videoHeight;\r\n\r\n        // Calculate pose accuracy if we have a selected pose\r\n        if (selectedPose && selectedPose.landmarks) {\r\n            const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\r\n            setPoseAccuracy(accuracyData.total);\r\n            setSegmentAccuracies(accuracyData.segments);\r\n        }\r\n\r\n        // Clear canvas\r\n        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\r\n\r\n        // Draw pose landmarks\r\n        if (results.poseLandmarks) {\r\n            canvasCtx.save();\r\n            canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\r\n\r\n            // Mirror the canvas context\r\n            canvasCtx.scale(-1, 1);\r\n            canvasCtx.translate(-videoWidth, 0);\r\n\r\n            // Draw connectors\r\n            canvasCtx.lineWidth = 3;\r\n\r\n            // Draw pose connections\r\n            function drawConnection(landmarks, start, end, color) {\r\n                const startPoint = landmarks[start];\r\n                const endPoint = landmarks[end];\r\n\r\n                if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\r\n                    canvasCtx.beginPath();\r\n                    canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\r\n                    canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\r\n                    canvasCtx.strokeStyle = color;\r\n                    canvasCtx.stroke();\r\n                }\r\n            }\r\n\r\n            const landmarks = results.poseLandmarks;\r\n\r\n            // Draw body parts with different colors\r\n            // Upper body (green)\r\n            const upperBodyColor = '#00FF00';\r\n            drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\r\n            drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\r\n            drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\r\n            drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\r\n            drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\r\n\r\n            // Head (red)\r\n            const headColor = '#FF0000';\r\n            drawConnection(landmarks, 0, 1, headColor);\r\n            drawConnection(landmarks, 1, 2, headColor);\r\n            drawConnection(landmarks, 2, 3, headColor);\r\n            drawConnection(landmarks, 3, 7, headColor);\r\n            drawConnection(landmarks, 0, 4, headColor);\r\n            drawConnection(landmarks, 4, 5, headColor);\r\n            drawConnection(landmarks, 5, 6, headColor);\r\n            drawConnection(landmarks, 6, 8, headColor);\r\n\r\n            // Torso (blue)\r\n            const torsoColor = '#0000FF';\r\n            drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\r\n            drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\r\n            drawConnection(landmarks, 23, 24, torsoColor); // hips\r\n\r\n            // Lower body (yellow)\r\n            const lowerBodyColor = '#FFFF00';\r\n            drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\r\n            drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\r\n            drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\r\n            drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\r\n\r\n            // Draw landmarks\r\n            landmarks.forEach((landmark, index) => {\r\n                if (landmark.visibility > 0.5) {\r\n                    canvasCtx.beginPath();\r\n                    canvasCtx.arc(\r\n                        landmark.x * videoWidth,\r\n                        landmark.y * videoHeight,\r\n                        5,\r\n                        0,\r\n                        2 * Math.PI\r\n                    );\r\n                    canvasCtx.fillStyle = '#FFFFFF';\r\n                    canvasCtx.fill();\r\n                    canvasCtx.strokeStyle = '#000000';\r\n                    canvasCtx.stroke();\r\n                }\r\n            });\r\n\r\n            canvasCtx.restore();\r\n        }\r\n    }, [selectedPose]);\r\n\r\n    useEffect(() => {\r\n        const loadPoses = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                setError(null);\r\n\r\n                // Default to 1 pose if no preferences\r\n                const count = userPreferences?.poseCount || 1;\r\n                console.log('Loading poses with count:', count);\r\n\r\n                // Load all poses up to the user's poseCount\r\n                const posesToLoad = poseNames.slice(0, count);\r\n                console.log('Poses to load:', posesToLoad);\r\n\r\n                const loadedPoses = await Promise.all(\r\n                    posesToLoad.map(async (poseName) => {\r\n                        try {\r\n                            const response = await fetch(`/pose_results/${poseName}_pose.json`);\r\n                            if (!response.ok) {\r\n                                throw new Error(`Failed to load pose: ${poseName}`);\r\n                            }\r\n                            const poseData = await response.json();\r\n                            return { ...poseData, name: poseName };\r\n                        } catch (err) {\r\n                            console.error(`Error loading pose ${poseName}:`, err);\r\n                            throw err;\r\n                        }\r\n                    })\r\n                );\r\n\r\n                console.log('Loaded poses:', loadedPoses);\r\n                setAvailablePoses(loadedPoses);\r\n                if (loadedPoses.length > 0) {\r\n                    setSelectedPose(loadedPoses[0]);\r\n                }\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                console.error('Error loading pose data:', err);\r\n                setError('Failed to load pose data. Please check your internet connection and try again.');\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        if (userPreferences) {\r\n            loadPoses();\r\n        }\r\n    }, [userPreferences]);\r\n\r\n    useEffect(() => {\r\n        let pose = null;\r\n        let camera = null;\r\n\r\n        const initializePose = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                setError(null);\r\n\r\n                // Create a new Pose instance\r\n                pose = new Pose({\r\n                    locateFile: (file) => {\r\n                        return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\r\n                    }\r\n                });\r\n\r\n                // Configure pose options\r\n                pose.setOptions({\r\n                    modelComplexity: 1,\r\n                    smoothLandmarks: true,\r\n                    enableSegmentation: false,\r\n                    smoothSegmentation: false,\r\n                    minDetectionConfidence: 0.5,\r\n                    minTrackingConfidence: 0.5\r\n                });\r\n\r\n                // Wait for the pose model to be ready\r\n                await pose.initialize();\r\n                pose.onResults(onResults);\r\n\r\n                if (webcamRef.current && webcamRef.current.video) {\r\n                    camera = new Camera(webcamRef.current.video, {\r\n                        onFrame: async () => {\r\n                            if (webcamRef.current && webcamRef.current.video) {\r\n                                await pose.send({ image: webcamRef.current.video });\r\n                            }\r\n                        },\r\n                        width: 640,\r\n                        height: 480\r\n                    });\r\n\r\n                    await camera.start();\r\n                    setIsLoading(false);\r\n                }\r\n            } catch (err) {\r\n                console.error('Error initializing pose detection:', err);\r\n                setError('Failed to initialize pose detection. Please ensure you have granted camera permissions and try again.');\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        // Initialize pose detection after a short delay to ensure webcam is ready\r\n        const timeoutId = setTimeout(() => {\r\n            if (webcamRef.current && webcamRef.current.video) {\r\n                initializePose();\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearTimeout(timeoutId);\r\n            if (camera) {\r\n                camera.stop();\r\n            }\r\n            if (pose) {\r\n                pose.close();\r\n            }\r\n        };\r\n    }, [onResults]);\r\n\r\n    useEffect(() => {\r\n        // Initialize WebSocket connection\r\n        const ws = new WebSocket('ws://localhost:8000/ws/pose-feedback');\r\n\r\n        ws.onopen = () => {\r\n            console.log('Connected to feedback server');\r\n            setWsConnection(ws);\r\n        };\r\n\r\n        ws.onmessage = (event) => {\r\n            setPoseFeedback(event.data);\r\n        };\r\n\r\n        ws.onerror = (error) => {\r\n            console.error('WebSocket error:', error);\r\n        };\r\n\r\n        return () => {\r\n            if (ws) {\r\n                ws.close();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // Send pose data to backend when accuracy updates\r\n    useEffect(() => {\r\n        if (wsConnection && selectedPose && Object.keys(segmentAccuracies).length > 0) {\r\n            const poseData = {\r\n                pose_name: selectedPose.name || 'unknown pose',\r\n                overall_accuracy: poseAccuracy,\r\n                segment_accuracies: segmentAccuracies\r\n            };\r\n            wsConnection.send(JSON.stringify(poseData));\r\n        }\r\n    }, [poseAccuracy, segmentAccuracies, selectedPose, wsConnection]);\r\n\r\n    // Timer effect for pose cycling\r\n    useEffect(() => {\r\n        if (!availablePoses.length || isSessionComplete) return;\r\n\r\n        const timer = setInterval(() => {\r\n            setTimeRemaining(prev => {\r\n                if (prev <= 1) {\r\n                    // Time to switch poses\r\n                    setCurrentPoseIndex(currentIndex => {\r\n                        const nextIndex = currentIndex + 1;\r\n                        if (nextIndex >= availablePoses.length) {\r\n                            setIsSessionComplete(true);\r\n                            return currentIndex;\r\n                        }\r\n                        setSelectedPose(availablePoses[nextIndex]);\r\n                        setTotalPosesCompleted(prev => prev + 1);\r\n                        return nextIndex;\r\n                    });\r\n                    return POSE_DURATION;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(timer);\r\n    }, [availablePoses, isSessionComplete]);\r\n\r\n    return (\r\n        <div className=\"pose-tracker\">\r\n            <div className=\"pose-header\">\r\n                <h1>Pose Tracking</h1>\r\n                {!isSessionComplete ? (\r\n                    <div className=\"pose-info\">\r\n                        <h3>Current Pose: {selectedPose?.name?.replace(/-/g, ' ').replace(/_pose$/, '')}</h3>\r\n                        <div className=\"timer\">Time Remaining: {timeRemaining}s</div>\r\n                        <div className=\"progress\">\r\n                            Pose {currentPoseIndex + 1} of {availablePoses.length || userPreferences?.poseCount || 1}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"session-complete\">\r\n                        <h3>Session Complete!</h3>\r\n                        <p>You completed {totalPosesCompleted} poses</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"pose-container\">\r\n                <div className=\"webcam-section\">\r\n                    <div className=\"webcam-container\">\r\n                        <Webcam\r\n                            ref={webcamRef}\r\n                            videoConstraints={videoConstraints}\r\n                            style={{ display: 'block' }}\r\n                            mirrored={true}\r\n                            onUserMediaError={(err) => {\r\n                                console.error('Webcam error:', err);\r\n                                setError('Failed to access camera. Please ensure you have granted camera permissions.');\r\n                                setIsLoading(false);\r\n                            }}\r\n                        />\r\n                        <canvas ref={canvasRef} className=\"pose-canvas\" />\r\n                        {isLoading && (\r\n                            <div className=\"loading-overlay\">\r\n                                <div className=\"loading-spinner\"></div>\r\n                                <div>Loading pose detection...</div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stats-section\">\r\n                    <div className=\"accuracy-card\">\r\n                        <h3>Overall Accuracy</h3>\r\n                        <div className=\"accuracy-value\">{poseAccuracy}%</div>\r\n                    </div>\r\n\r\n                    <div className=\"segment-accuracies\">\r\n                        {Object.entries(segmentAccuracies).map(([segment, data]) => (\r\n                            <div key={segment} className=\"segment-item\">\r\n                                <label>{segment.replace(/([A-Z])/g, ' $1').trim()}</label>\r\n                                <div className=\"accuracy-bar\">\r\n                                    <div\r\n                                        className=\"accuracy-fill\"\r\n                                        style={{ width: `${data.accuracy}%` }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    {poseFeedback && (\r\n                        <div className=\"feedback-message\">\r\n                            {poseFeedback}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {error && (\r\n                <div className=\"error-message\">\r\n                    <p>{error}</p>\r\n                    <button\r\n                        className=\"retry-button\"\r\n                        onClick={() => {\r\n                            setError(null);\r\n                            window.location.reload();\r\n                        }}\r\n                    >\r\n                        Retry\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PoseTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}