{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quant\\\\Documents\\\\Programming\\\\Projects\\\\Hackathon\\\\MakeUofT\\\\frontend\\\\src\\\\components\\\\PoseTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTracker = ({\n  selectedPose\n}) => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const poseRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poseAccuracy, setPoseAccuracy] = useState(0);\n  const [segmentAccuracies, setSegmentAccuracies] = useState({});\n  const videoConstraints = {\n    width: 640,\n    height: 480,\n    facingMode: 'user'\n  };\n  const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n    if (!targetPose || !userLandmarks) return {\n      total: 0,\n      segments: {}\n    };\n\n    // Define body segments with their corresponding landmark indices\n    const bodySegments = {\n      head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      upperBody: [11, 12, 13, 14, 15, 16],\n      // shoulders, elbows, wrists\n      torso: [11, 12, 23, 24],\n      // shoulders to hips\n      lowerBody: [23, 24, 25, 26, 27, 28] // hips to ankles (removed extra points)\n    };\n    let segmentAccuracies = {};\n    let visibleSegments = 0;\n\n    // Calculate accuracy for each body segment\n    for (const [segment, points] of Object.entries(bodySegments)) {\n      let segmentTotal = 0;\n      let segmentPoints = 0;\n      let visiblePoints = 0;\n      let totalVisibilityScore = 0;\n      points.forEach(index => {\n        const userLandmark = userLandmarks[index];\n        const targetLandmark = targetPose.landmarks[index];\n\n        // Add to visibility score even if below threshold\n        totalVisibilityScore += userLandmark.visibility;\n\n        // Lower the visibility threshold for individual points\n        if (userLandmark.visibility > 0.1 && targetLandmark.visibility > 0.1) {\n          visiblePoints++;\n\n          // Calculate Euclidean distance for x and y coordinates\n          const distance = Math.sqrt(Math.pow(userLandmark.x - targetLandmark.x, 2) + Math.pow(userLandmark.y - targetLandmark.y, 2));\n\n          // Convert distance to accuracy (closer = higher accuracy)\n          // Adjust tolerance based on visibility\n          const tolerance = 0.15; // Increased tolerance\n          const pointAccuracy = Math.max(0, 1 - distance / tolerance);\n\n          // Weight the accuracy by visibility\n          const weightedAccuracy = pointAccuracy * Math.min(userLandmark.visibility, targetLandmark.visibility);\n          segmentTotal += weightedAccuracy;\n          segmentPoints++;\n        }\n      });\n\n      // Calculate segment visibility percentage with a lower threshold\n      const visibilityThreshold = 0.15; // Lowered threshold to 15%\n      const averageVisibility = totalVisibilityScore / points.length;\n      const visibilityPercentage = visiblePoints / points.length;\n\n      // Include segment if it has any visible points and meets minimum visibility\n      if (visibilityPercentage > visibilityThreshold && segmentPoints > 0) {\n        const segmentAccuracy = segmentTotal / segmentPoints * 100;\n        // Apply visibility scaling to accuracy\n        segmentAccuracies[segment] = {\n          accuracy: segmentAccuracy * Math.min(1, averageVisibility * 2),\n          // Scale visibility impact\n          visibility: visibilityPercentage\n        };\n        visibleSegments++;\n      }\n    }\n\n    // If no segments are visible, return 0\n    if (visibleSegments === 0) return {\n      total: 0,\n      segments: {}\n    };\n\n    // Calculate weighted average of visible segment accuracies\n    let totalAccuracy = 0;\n    let totalWeight = 0;\n    for (const [segment, data] of Object.entries(segmentAccuracies)) {\n      const weight = data.visibility;\n      totalAccuracy += data.accuracy * weight;\n      totalWeight += weight;\n    }\n\n    // Return both total accuracy and segment accuracies\n    return {\n      total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n      segments: segmentAccuracies\n    };\n  };\n  const onResults = useCallback(results => {\n    if (!canvasRef.current || !results.poseLandmarks) return;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext('2d');\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas dimensions to match video\n    canvasElement.width = videoWidth;\n    canvasElement.height = videoHeight;\n\n    // Calculate pose accuracy if we have a selected pose\n    if (selectedPose && selectedPose.landmarks) {\n      const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n      setPoseAccuracy(accuracyData.total);\n      setSegmentAccuracies(accuracyData.segments);\n    }\n\n    // Clear canvas\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    // Draw pose landmarks\n    if (results.poseLandmarks) {\n      // Draw the pose landmarks\n      canvasCtx.save();\n      canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n      // Mirror the canvas context\n      canvasCtx.scale(-1, 1);\n      canvasCtx.translate(-videoWidth, 0);\n\n      // Draw connectors\n      canvasCtx.lineWidth = 3;\n\n      // Draw pose connections\n      function drawConnection(landmarks, start, end, color) {\n        const startPoint = landmarks[start];\n        const endPoint = landmarks[end];\n        if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n          canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n          canvasCtx.strokeStyle = color;\n          canvasCtx.stroke();\n        }\n      }\n      const landmarks = results.poseLandmarks;\n\n      // Draw body parts with different colors\n      // Upper body (green)\n      const upperBodyColor = '#00FF00';\n      drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\n      drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n      drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n      drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n      drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n\n      // Head (red)\n      const headColor = '#FF0000';\n      drawConnection(landmarks, 0, 1, headColor);\n      drawConnection(landmarks, 1, 2, headColor);\n      drawConnection(landmarks, 2, 3, headColor);\n      drawConnection(landmarks, 3, 7, headColor);\n      drawConnection(landmarks, 0, 4, headColor);\n      drawConnection(landmarks, 4, 5, headColor);\n      drawConnection(landmarks, 5, 6, headColor);\n      drawConnection(landmarks, 6, 8, headColor);\n\n      // Torso (blue)\n      const torsoColor = '#0000FF';\n      drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n      drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n      drawConnection(landmarks, 23, 24, torsoColor); // hips\n\n      // Lower body (yellow)\n      const lowerBodyColor = '#FFFF00';\n      drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n      drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n      drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n      drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n\n      // Draw landmarks\n      landmarks.forEach((landmark, index) => {\n        if (landmark.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.arc(landmark.x * videoWidth, landmark.y * videoHeight, 5, 0, 2 * Math.PI);\n          canvasCtx.fillStyle = '#FFFFFF';\n          canvasCtx.fill();\n          canvasCtx.strokeStyle = '#000000';\n          canvasCtx.stroke();\n        }\n      });\n      canvasCtx.restore();\n    }\n  }, [selectedPose]);\n  useEffect(() => {\n    let pose = null;\n    let camera = null;\n    const initializePose = async () => {\n      try {\n        // Create a new Pose instance\n        pose = new Pose({\n          locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.4.1646425229/${file}`;\n          }\n        });\n\n        // Configure pose options\n        await pose.setOptions({\n          modelComplexity: 1,\n          smoothLandmarks: true,\n          minDetectionConfidence: 0.5,\n          minTrackingConfidence: 0.5\n        });\n\n        // Set up the onResults callback\n        pose.onResults(onResults);\n\n        // Initialize camera only after pose is ready\n        if (webcamRef.current && webcamRef.current.video) {\n          camera = new Camera(webcamRef.current.video, {\n            onFrame: async () => {\n              try {\n                if (webcamRef.current && webcamRef.current.video) {\n                  await pose.send({\n                    image: webcamRef.current.video\n                  });\n                }\n              } catch (err) {\n                console.error('Error in camera frame processing:', err);\n              }\n            },\n            width: 640,\n            height: 480\n          });\n          await camera.start();\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Error initializing pose detection:', err);\n        setError('Failed to initialize pose detection. Please try refreshing the page.');\n        setIsLoading(false);\n      }\n    };\n\n    // Initialize pose detection\n    initializePose();\n\n    // Cleanup function\n    return () => {\n      if (camera) {\n        camera.stop();\n      }\n      if (pose) {\n        pose.close();\n      }\n    };\n  }, [onResults]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pose-tracker\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading pose detector... Please wait a moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '0.9em',\n          color: '#666'\n        },\n        children: \"This may take a few seconds to initialize.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          marginTop: '10px',\n          padding: '8px 16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-container\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        className: \"webcam\",\n        mirrored: true,\n        videoConstraints: videoConstraints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"pose-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), selectedPose && selectedPose.landmarks && Object.keys(segmentAccuracies).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accuracy-display\",\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          background: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '15px',\n          borderRadius: '5px',\n          fontSize: '1.1em',\n          zIndex: 1000\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px',\n            fontWeight: 'bold'\n          },\n          children: [\"Overall Accuracy: \", poseAccuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.9em'\n          },\n          children: Object.entries(segmentAccuracies).map(([segment, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '5px'\n            },\n            children: [segment.charAt(0).toUpperCase() + segment.slice(1), \": \", Math.round(data.accuracy), \"%\"]\n          }, segment, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 9\n  }, this);\n};\n_s(PoseTracker, \"8mtGNSLsT2ntv7fseDpd769CZ70=\");\n_c = PoseTracker;\nexport default PoseTracker;\nvar _c;\n$RefreshReg$(_c, \"PoseTracker\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Webcam","Camera","Pose","jsxDEV","_jsxDEV","PoseTracker","selectedPose","_s","webcamRef","canvasRef","poseRef","isLoading","setIsLoading","error","setError","poseAccuracy","setPoseAccuracy","segmentAccuracies","setSegmentAccuracies","videoConstraints","width","height","facingMode","calculatePoseAccuracy","userLandmarks","targetPose","total","segments","bodySegments","head","upperBody","torso","lowerBody","visibleSegments","segment","points","Object","entries","segmentTotal","segmentPoints","visiblePoints","totalVisibilityScore","forEach","index","userLandmark","targetLandmark","landmarks","visibility","distance","Math","sqrt","pow","x","y","tolerance","pointAccuracy","max","weightedAccuracy","min","visibilityThreshold","averageVisibility","length","visibilityPercentage","segmentAccuracy","accuracy","totalAccuracy","totalWeight","data","weight","round","onResults","results","current","poseLandmarks","canvasElement","canvasCtx","getContext","videoWidth","video","videoHeight","accuracyData","clearRect","save","scale","translate","lineWidth","drawConnection","start","end","color","startPoint","endPoint","beginPath","moveTo","lineTo","strokeStyle","stroke","upperBodyColor","headColor","torsoColor","lowerBodyColor","landmark","arc","PI","fillStyle","fill","restore","pose","camera","initializePose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","minDetectionConfidence","minTrackingConfidence","onFrame","send","image","err","console","stop","close","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","onClick","window","location","reload","marginTop","padding","backgroundColor","border","borderRadius","cursor","ref","mirrored","keys","position","top","left","background","zIndex","marginBottom","fontWeight","map","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/Quant/Documents/Programming/Projects/Hackathon/MakeUofT/frontend/src/components/PoseTracker.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\n\nconst PoseTracker = ({ selectedPose }) => {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n    const poseRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [poseAccuracy, setPoseAccuracy] = useState(0);\n    const [segmentAccuracies, setSegmentAccuracies] = useState({});\n\n    const videoConstraints = {\n        width: 640,\n        height: 480,\n        facingMode: 'user',\n    };\n\n    const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n        if (!targetPose || !userLandmarks) return { total: 0, segments: {} };\n\n        // Define body segments with their corresponding landmark indices\n        const bodySegments = {\n            head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            upperBody: [11, 12, 13, 14, 15, 16], // shoulders, elbows, wrists\n            torso: [11, 12, 23, 24], // shoulders to hips\n            lowerBody: [23, 24, 25, 26, 27, 28] // hips to ankles (removed extra points)\n        };\n\n        let segmentAccuracies = {};\n        let visibleSegments = 0;\n\n        // Calculate accuracy for each body segment\n        for (const [segment, points] of Object.entries(bodySegments)) {\n            let segmentTotal = 0;\n            let segmentPoints = 0;\n            let visiblePoints = 0;\n            let totalVisibilityScore = 0;\n\n            points.forEach(index => {\n                const userLandmark = userLandmarks[index];\n                const targetLandmark = targetPose.landmarks[index];\n\n                // Add to visibility score even if below threshold\n                totalVisibilityScore += userLandmark.visibility;\n\n                // Lower the visibility threshold for individual points\n                if (userLandmark.visibility > 0.1 && targetLandmark.visibility > 0.1) {\n                    visiblePoints++;\n\n                    // Calculate Euclidean distance for x and y coordinates\n                    const distance = Math.sqrt(\n                        Math.pow(userLandmark.x - targetLandmark.x, 2) +\n                        Math.pow(userLandmark.y - targetLandmark.y, 2)\n                    );\n\n                    // Convert distance to accuracy (closer = higher accuracy)\n                    // Adjust tolerance based on visibility\n                    const tolerance = 0.15; // Increased tolerance\n                    const pointAccuracy = Math.max(0, 1 - (distance / tolerance));\n\n                    // Weight the accuracy by visibility\n                    const weightedAccuracy = pointAccuracy * Math.min(userLandmark.visibility, targetLandmark.visibility);\n                    segmentTotal += weightedAccuracy;\n                    segmentPoints++;\n                }\n            });\n\n            // Calculate segment visibility percentage with a lower threshold\n            const visibilityThreshold = 0.15; // Lowered threshold to 15%\n            const averageVisibility = totalVisibilityScore / points.length;\n            const visibilityPercentage = visiblePoints / points.length;\n\n            // Include segment if it has any visible points and meets minimum visibility\n            if (visibilityPercentage > visibilityThreshold && segmentPoints > 0) {\n                const segmentAccuracy = (segmentTotal / segmentPoints) * 100;\n                // Apply visibility scaling to accuracy\n                segmentAccuracies[segment] = {\n                    accuracy: segmentAccuracy * Math.min(1, averageVisibility * 2), // Scale visibility impact\n                    visibility: visibilityPercentage\n                };\n                visibleSegments++;\n            }\n        }\n\n        // If no segments are visible, return 0\n        if (visibleSegments === 0) return { total: 0, segments: {} };\n\n        // Calculate weighted average of visible segment accuracies\n        let totalAccuracy = 0;\n        let totalWeight = 0;\n\n        for (const [segment, data] of Object.entries(segmentAccuracies)) {\n            const weight = data.visibility;\n            totalAccuracy += data.accuracy * weight;\n            totalWeight += weight;\n        }\n\n        // Return both total accuracy and segment accuracies\n        return {\n            total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n            segments: segmentAccuracies\n        };\n    };\n\n    const onResults = useCallback((results) => {\n        if (!canvasRef.current || !results.poseLandmarks) return;\n\n        const canvasElement = canvasRef.current;\n        const canvasCtx = canvasElement.getContext('2d');\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight;\n\n        // Set canvas dimensions to match video\n        canvasElement.width = videoWidth;\n        canvasElement.height = videoHeight;\n\n        // Calculate pose accuracy if we have a selected pose\n        if (selectedPose && selectedPose.landmarks) {\n            const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n            setPoseAccuracy(accuracyData.total);\n            setSegmentAccuracies(accuracyData.segments);\n        }\n\n        // Clear canvas\n        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n        // Draw pose landmarks\n        if (results.poseLandmarks) {\n            // Draw the pose landmarks\n            canvasCtx.save();\n            canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n            // Mirror the canvas context\n            canvasCtx.scale(-1, 1);\n            canvasCtx.translate(-videoWidth, 0);\n\n            // Draw connectors\n            canvasCtx.lineWidth = 3;\n\n            // Draw pose connections\n            function drawConnection(landmarks, start, end, color) {\n                const startPoint = landmarks[start];\n                const endPoint = landmarks[end];\n\n                if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n                    canvasCtx.beginPath();\n                    canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n                    canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n                    canvasCtx.strokeStyle = color;\n                    canvasCtx.stroke();\n                }\n            }\n\n            const landmarks = results.poseLandmarks;\n\n            // Draw body parts with different colors\n            // Upper body (green)\n            const upperBodyColor = '#00FF00';\n            drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\n            drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n            drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n            drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n            drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n\n            // Head (red)\n            const headColor = '#FF0000';\n            drawConnection(landmarks, 0, 1, headColor);\n            drawConnection(landmarks, 1, 2, headColor);\n            drawConnection(landmarks, 2, 3, headColor);\n            drawConnection(landmarks, 3, 7, headColor);\n            drawConnection(landmarks, 0, 4, headColor);\n            drawConnection(landmarks, 4, 5, headColor);\n            drawConnection(landmarks, 5, 6, headColor);\n            drawConnection(landmarks, 6, 8, headColor);\n\n            // Torso (blue)\n            const torsoColor = '#0000FF';\n            drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n            drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n            drawConnection(landmarks, 23, 24, torsoColor); // hips\n\n            // Lower body (yellow)\n            const lowerBodyColor = '#FFFF00';\n            drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n            drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n            drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n            drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n\n            // Draw landmarks\n            landmarks.forEach((landmark, index) => {\n                if (landmark.visibility > 0.5) {\n                    canvasCtx.beginPath();\n                    canvasCtx.arc(\n                        landmark.x * videoWidth,\n                        landmark.y * videoHeight,\n                        5,\n                        0,\n                        2 * Math.PI\n                    );\n                    canvasCtx.fillStyle = '#FFFFFF';\n                    canvasCtx.fill();\n                    canvasCtx.strokeStyle = '#000000';\n                    canvasCtx.stroke();\n                }\n            });\n\n            canvasCtx.restore();\n        }\n    }, [selectedPose]);\n\n    useEffect(() => {\n        let pose = null;\n        let camera = null;\n\n        const initializePose = async () => {\n            try {\n                // Create a new Pose instance\n                pose = new Pose({\n                    locateFile: (file) => {\n                        return `https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.4.1646425229/${file}`;\n                    }\n                });\n\n                // Configure pose options\n                await pose.setOptions({\n                    modelComplexity: 1,\n                    smoothLandmarks: true,\n                    minDetectionConfidence: 0.5,\n                    minTrackingConfidence: 0.5,\n                });\n\n                // Set up the onResults callback\n                pose.onResults(onResults);\n\n                // Initialize camera only after pose is ready\n                if (webcamRef.current && webcamRef.current.video) {\n                    camera = new Camera(webcamRef.current.video, {\n                        onFrame: async () => {\n                            try {\n                                if (webcamRef.current && webcamRef.current.video) {\n                                    await pose.send({ image: webcamRef.current.video });\n                                }\n                            } catch (err) {\n                                console.error('Error in camera frame processing:', err);\n                            }\n                        },\n                        width: 640,\n                        height: 480\n                    });\n\n                    await camera.start();\n                    setIsLoading(false);\n                }\n            } catch (err) {\n                console.error('Error initializing pose detection:', err);\n                setError('Failed to initialize pose detection. Please try refreshing the page.');\n                setIsLoading(false);\n            }\n        };\n\n        // Initialize pose detection\n        initializePose();\n\n        // Cleanup function\n        return () => {\n            if (camera) {\n                camera.stop();\n            }\n            if (pose) {\n                pose.close();\n            }\n        };\n    }, [onResults]);\n\n    return (\n        <div className=\"pose-tracker\">\n            {isLoading && (\n                <div className=\"loading\">\n                    <p>Loading pose detector... Please wait a moment.</p>\n                    <p style={{ fontSize: '0.9em', color: '#666' }}>\n                        This may take a few seconds to initialize.\n                    </p>\n                </div>\n            )}\n            {error && (\n                <div className=\"error\">\n                    <p>{error}</p>\n                    <button\n                        onClick={() => window.location.reload()}\n                        style={{\n                            marginTop: '10px',\n                            padding: '8px 16px',\n                            backgroundColor: '#4CAF50',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '4px',\n                            cursor: 'pointer',\n                        }}\n                    >\n                        Retry\n                    </button>\n                </div>\n            )}\n            <div className=\"camera-container\">\n                <Webcam\n                    ref={webcamRef}\n                    className=\"webcam\"\n                    mirrored={true}\n                    videoConstraints={videoConstraints}\n                />\n                <canvas ref={canvasRef} className=\"pose-canvas\" />\n                {selectedPose && selectedPose.landmarks && Object.keys(segmentAccuracies).length > 0 && (\n                    <div className=\"accuracy-display\" style={{\n                        position: 'absolute',\n                        top: '20px',\n                        left: '20px',\n                        background: 'rgba(0, 0, 0, 0.7)',\n                        color: 'white',\n                        padding: '15px',\n                        borderRadius: '5px',\n                        fontSize: '1.1em',\n                        zIndex: 1000\n                    }}>\n                        <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>\n                            Overall Accuracy: {poseAccuracy}%\n                        </div>\n                        <div style={{ fontSize: '0.9em' }}>\n                            {Object.entries(segmentAccuracies).map(([segment, data]) => (\n                                <div key={segment} style={{ marginBottom: '5px' }}>\n                                    {segment.charAt(0).toUpperCase() + segment.slice(1)}: {Math.round(data.accuracy)}%\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PoseTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}