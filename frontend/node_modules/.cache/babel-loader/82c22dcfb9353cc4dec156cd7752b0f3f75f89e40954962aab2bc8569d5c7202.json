{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quant\\\\Documents\\\\Programming\\\\Projects\\\\Hackathon\\\\MakeUofT\\\\frontend\\\\src\\\\components\\\\PoseTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTracker = ({\n  selectedPose\n}) => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const poseRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poseAccuracy, setPoseAccuracy] = useState(0);\n  const [segmentAccuracies, setSegmentAccuracies] = useState({});\n  const [poseFeedback, setPoseFeedback] = useState('');\n  const [wsConnection, setWsConnection] = useState(null);\n  const videoConstraints = {\n    width: 640,\n    height: 480,\n    facingMode: 'user'\n  };\n  const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n    if (!targetPose || !userLandmarks) return {\n      total: 0,\n      segments: {}\n    };\n\n    // Define body segments with their corresponding landmark indices\n    const bodySegments = {\n      head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      upperBody: [11, 12, 13, 14, 15, 16],\n      // shoulders, elbows, wrists\n      torso: [11, 12, 23, 24],\n      // shoulders to hips\n      lowerBody: [23, 24, 25, 26, 27, 28] // hips to ankles\n    };\n\n    // Define key points that must be visible for each segment\n    const requiredPoints = {\n      head: [0, 1, 4],\n      // Nose and eyes\n      upperBody: [11, 12],\n      // Shoulders\n      torso: [11, 12, 23, 24],\n      // Shoulders and hips\n      lowerBody: [23, 24, 25, 26] // Hips and knees\n    };\n\n    // Helper function to normalize pose relative to shoulders\n    const normalizePose = landmarks => {\n      // Get shoulder points\n      const leftShoulder = landmarks[11];\n      const rightShoulder = landmarks[12];\n\n      // Calculate shoulder center and width\n      const shoulderCenterX = (leftShoulder.x + rightShoulder.x) / 2;\n      const shoulderCenterY = (leftShoulder.y + rightShoulder.y) / 2;\n      const shoulderWidth = Math.sqrt(Math.pow(rightShoulder.x - leftShoulder.x, 2) + Math.pow(rightShoulder.y - leftShoulder.y, 2));\n\n      // Return normalized landmarks\n      return landmarks.map(landmark => ({\n        x: (landmark.x - shoulderCenterX) / shoulderWidth,\n        y: (landmark.y - shoulderCenterY) / shoulderWidth,\n        visibility: landmark.visibility\n      }));\n    };\n\n    // Normalize both poses\n    const normalizedUser = normalizePose(userLandmarks);\n    const normalizedTarget = normalizePose(targetPose.landmarks);\n    let segmentAccuracies = {};\n    let visibleSegments = 0;\n\n    // Calculate accuracy for each body segment\n    for (const [segment, points] of Object.entries(bodySegments)) {\n      // Check if required points are visible\n      const requiredVisible = requiredPoints[segment].every(index => {\n        const userPoint = normalizedUser[index];\n        const targetPoint = normalizedTarget[index];\n        return userPoint.visibility > 0.5 && targetPoint.visibility > 0.5;\n      });\n      if (!requiredVisible) {\n        continue; // Skip this segment if required points aren't visible\n      }\n      let segmentTotal = 0;\n      let segmentPoints = 0;\n\n      // Calculate accuracies for points\n      points.forEach(index => {\n        const userLandmark = normalizedUser[index];\n        const targetLandmark = normalizedTarget[index];\n\n        // Check if point is visible enough in both poses\n        if (userLandmark.visibility > 0.5 && targetLandmark.visibility > 0.5) {\n          // Calculate angle between points relative to shoulder center\n          const userAngle = Math.atan2(userLandmark.y, userLandmark.x);\n          const targetAngle = Math.atan2(targetLandmark.y, targetLandmark.x);\n          const angleDiff = Math.abs(userAngle - targetAngle);\n\n          // Calculate position difference\n          const distance = Math.sqrt(Math.pow(userLandmark.x - targetLandmark.x, 2) + Math.pow(userLandmark.y - targetLandmark.y, 2));\n\n          // Combine angle and distance accuracy\n          const angleAccuracy = Math.max(0, 1 - angleDiff / Math.PI);\n          const distanceAccuracy = Math.max(0, 1 - distance / 0.5);\n          const pointAccuracy = angleAccuracy * 0.7 + distanceAccuracy * 0.3;\n\n          // Add to segment total with visibility weight\n          const weight = Math.min(userLandmark.visibility, targetLandmark.visibility);\n          segmentTotal += pointAccuracy * weight;\n          segmentPoints += weight;\n        }\n      });\n\n      // Calculate segment accuracy if we have points\n      if (segmentPoints > 0) {\n        const rawAccuracy = segmentTotal / segmentPoints * 100;\n        segmentAccuracies[segment] = {\n          accuracy: Math.min(100, Math.max(0, rawAccuracy)),\n          visibility: segmentPoints / points.length\n        };\n        visibleSegments++;\n      }\n    }\n\n    // Calculate overall accuracy\n    if (visibleSegments === 0) return {\n      total: 0,\n      segments: {}\n    };\n    let totalAccuracy = 0;\n    let totalWeight = 0;\n\n    // Weight segments differently\n    const segmentWeights = {\n      head: 1,\n      upperBody: 1.2,\n      torso: 1.2,\n      lowerBody: 1\n    };\n    for (const [segment, data] of Object.entries(segmentAccuracies)) {\n      const weight = segmentWeights[segment] * data.visibility;\n      totalAccuracy += data.accuracy * weight;\n      totalWeight += weight;\n    }\n    return {\n      total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n      segments: segmentAccuracies\n    };\n  };\n  const onResults = useCallback(results => {\n    if (!canvasRef.current || !results.poseLandmarks) return;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext('2d');\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas dimensions to match video\n    canvasElement.width = videoWidth;\n    canvasElement.height = videoHeight;\n\n    // Calculate pose accuracy if we have a selected pose\n    if (selectedPose && selectedPose.landmarks) {\n      const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n      setPoseAccuracy(accuracyData.total);\n      setSegmentAccuracies(accuracyData.segments);\n    }\n\n    // Clear canvas\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    // Draw pose landmarks\n    if (results.poseLandmarks) {\n      // Draw the pose landmarks\n      canvasCtx.save();\n      canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n      // Mirror the canvas context\n      canvasCtx.scale(-1, 1);\n      canvasCtx.translate(-videoWidth, 0);\n\n      // Draw connectors\n      canvasCtx.lineWidth = 3;\n\n      // Draw pose connections\n      function drawConnection(landmarks, start, end, color) {\n        const startPoint = landmarks[start];\n        const endPoint = landmarks[end];\n        if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n          canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n          canvasCtx.strokeStyle = color;\n          canvasCtx.stroke();\n        }\n      }\n      const landmarks = results.poseLandmarks;\n\n      // Draw body parts with different colors\n      // Upper body (green)\n      const upperBodyColor = '#00FF00';\n      drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\n      drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n      drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n      drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n      drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n\n      // Head (red)\n      const headColor = '#FF0000';\n      drawConnection(landmarks, 0, 1, headColor);\n      drawConnection(landmarks, 1, 2, headColor);\n      drawConnection(landmarks, 2, 3, headColor);\n      drawConnection(landmarks, 3, 7, headColor);\n      drawConnection(landmarks, 0, 4, headColor);\n      drawConnection(landmarks, 4, 5, headColor);\n      drawConnection(landmarks, 5, 6, headColor);\n      drawConnection(landmarks, 6, 8, headColor);\n\n      // Torso (blue)\n      const torsoColor = '#0000FF';\n      drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n      drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n      drawConnection(landmarks, 23, 24, torsoColor); // hips\n\n      // Lower body (yellow)\n      const lowerBodyColor = '#FFFF00';\n      drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n      drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n      drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n      drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n\n      // Draw landmarks\n      landmarks.forEach((landmark, index) => {\n        if (landmark.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.arc(landmark.x * videoWidth, landmark.y * videoHeight, 5, 0, 2 * Math.PI);\n          canvasCtx.fillStyle = '#FFFFFF';\n          canvasCtx.fill();\n          canvasCtx.strokeStyle = '#000000';\n          canvasCtx.stroke();\n        }\n      });\n      canvasCtx.restore();\n    }\n  }, [selectedPose]);\n  useEffect(() => {\n    let pose = null;\n    let camera = null;\n    const initializePose = async () => {\n      try {\n        pose = new Pose({\n          locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n          }\n        });\n        pose.setOptions({\n          modelComplexity: 1,\n          smoothLandmarks: true,\n          enableSegmentation: false,\n          smoothSegmentation: false,\n          minDetectionConfidence: 0.5,\n          minTrackingConfidence: 0.5\n        });\n        pose.onResults(onResults);\n        if (webcamRef.current && webcamRef.current.video) {\n          camera = new Camera(webcamRef.current.video, {\n            onFrame: async () => {\n              if (webcamRef.current && webcamRef.current.video) {\n                await pose.send({\n                  image: webcamRef.current.video\n                });\n              }\n            },\n            width: 640,\n            height: 480\n          });\n          camera.start();\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Error initializing pose detection:', err);\n        setError('Failed to initialize pose detection. Please try refreshing the page.');\n        setIsLoading(false);\n      }\n    };\n    initializePose();\n    return () => {\n      if (camera) {\n        camera.stop();\n      }\n      if (pose) {\n        pose.close();\n      }\n    };\n  }, [onResults]);\n  useEffect(() => {\n    // Initialize WebSocket connection\n    const ws = new WebSocket('ws://localhost:8000/ws/pose-feedback');\n    ws.onopen = () => {\n      console.log('Connected to feedback server');\n      setWsConnection(ws);\n    };\n    ws.onmessage = event => {\n      setPoseFeedback(event.data);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Send pose data to backend when accuracy updates\n  useEffect(() => {\n    if (wsConnection && selectedPose && Object.keys(segmentAccuracies).length > 0) {\n      const poseData = {\n        pose_name: selectedPose.name || 'unknown pose',\n        overall_accuracy: poseAccuracy,\n        segment_accuracies: segmentAccuracies\n      };\n      wsConnection.send(JSON.stringify(poseData));\n    }\n  }, [poseAccuracy, segmentAccuracies, selectedPose, wsConnection]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pose-tracker\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading pose detector... Please wait a moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '0.9em',\n          color: '#666'\n        },\n        children: \"This may take a few seconds to initialize.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          marginTop: '10px',\n          padding: '8px 16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-container\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        className: \"webcam\",\n        mirrored: true,\n        videoConstraints: videoConstraints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"pose-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this), selectedPose && selectedPose.landmarks && Object.keys(segmentAccuracies).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accuracy-display\",\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          background: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '15px',\n          borderRadius: '5px',\n          fontSize: '1.1em',\n          zIndex: 1000\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px',\n            fontWeight: 'bold'\n          },\n          children: [\"Overall Accuracy: \", poseAccuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.9em'\n          },\n          children: Object.entries(segmentAccuracies).map(([segment, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '5px'\n            },\n            children: [segment.charAt(0).toUpperCase() + segment.slice(1), \": \", Math.round(data.accuracy), \"%\"]\n          }, segment, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 25\n        }, this), poseFeedback && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '15px',\n            padding: '10px',\n            borderTop: '1px solid rgba(255, 255, 255, 0.3)',\n            fontSize: '0.9em',\n            maxWidth: '300px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 'bold',\n              marginBottom: '5px'\n            },\n            children: \"Instructor Feedback:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 33\n          }, this), poseFeedback]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 9\n  }, this);\n};\n_s(PoseTracker, \"AF7thxwvYjb0Da7xqRrfLC782gA=\");\n_c = PoseTracker;\nexport default PoseTracker;\nvar _c;\n$RefreshReg$(_c, \"PoseTracker\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Webcam","Camera","Pose","jsxDEV","_jsxDEV","PoseTracker","selectedPose","_s","webcamRef","canvasRef","poseRef","isLoading","setIsLoading","error","setError","poseAccuracy","setPoseAccuracy","segmentAccuracies","setSegmentAccuracies","poseFeedback","setPoseFeedback","wsConnection","setWsConnection","videoConstraints","width","height","facingMode","calculatePoseAccuracy","userLandmarks","targetPose","total","segments","bodySegments","head","upperBody","torso","lowerBody","requiredPoints","normalizePose","landmarks","leftShoulder","rightShoulder","shoulderCenterX","x","shoulderCenterY","y","shoulderWidth","Math","sqrt","pow","map","landmark","visibility","normalizedUser","normalizedTarget","visibleSegments","segment","points","Object","entries","requiredVisible","every","index","userPoint","targetPoint","segmentTotal","segmentPoints","forEach","userLandmark","targetLandmark","userAngle","atan2","targetAngle","angleDiff","abs","distance","angleAccuracy","max","PI","distanceAccuracy","pointAccuracy","weight","min","rawAccuracy","accuracy","length","totalAccuracy","totalWeight","segmentWeights","data","round","onResults","results","current","poseLandmarks","canvasElement","canvasCtx","getContext","videoWidth","video","videoHeight","accuracyData","clearRect","save","scale","translate","lineWidth","drawConnection","start","end","color","startPoint","endPoint","beginPath","moveTo","lineTo","strokeStyle","stroke","upperBodyColor","headColor","torsoColor","lowerBodyColor","arc","fillStyle","fill","restore","pose","camera","initializePose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","onFrame","send","image","err","console","stop","close","ws","WebSocket","onopen","log","onmessage","event","onerror","keys","poseData","pose_name","name","overall_accuracy","segment_accuracies","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","onClick","window","location","reload","marginTop","padding","backgroundColor","border","borderRadius","cursor","ref","mirrored","position","top","left","background","zIndex","marginBottom","fontWeight","charAt","toUpperCase","slice","borderTop","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/Quant/Documents/Programming/Projects/Hackathon/MakeUofT/frontend/src/components/PoseTracker.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\n\nconst PoseTracker = ({ selectedPose }) => {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n    const poseRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [poseAccuracy, setPoseAccuracy] = useState(0);\n    const [segmentAccuracies, setSegmentAccuracies] = useState({});\n    const [poseFeedback, setPoseFeedback] = useState('');\n    const [wsConnection, setWsConnection] = useState(null);\n\n    const videoConstraints = {\n        width: 640,\n        height: 480,\n        facingMode: 'user',\n    };\n\n    const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n        if (!targetPose || !userLandmarks) return { total: 0, segments: {} };\n\n        // Define body segments with their corresponding landmark indices\n        const bodySegments = {\n            head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            upperBody: [11, 12, 13, 14, 15, 16], // shoulders, elbows, wrists\n            torso: [11, 12, 23, 24], // shoulders to hips\n            lowerBody: [23, 24, 25, 26, 27, 28] // hips to ankles\n        };\n\n        // Define key points that must be visible for each segment\n        const requiredPoints = {\n            head: [0, 1, 4], // Nose and eyes\n            upperBody: [11, 12], // Shoulders\n            torso: [11, 12, 23, 24], // Shoulders and hips\n            lowerBody: [23, 24, 25, 26] // Hips and knees\n        };\n\n        // Helper function to normalize pose relative to shoulders\n        const normalizePose = (landmarks) => {\n            // Get shoulder points\n            const leftShoulder = landmarks[11];\n            const rightShoulder = landmarks[12];\n\n            // Calculate shoulder center and width\n            const shoulderCenterX = (leftShoulder.x + rightShoulder.x) / 2;\n            const shoulderCenterY = (leftShoulder.y + rightShoulder.y) / 2;\n            const shoulderWidth = Math.sqrt(\n                Math.pow(rightShoulder.x - leftShoulder.x, 2) +\n                Math.pow(rightShoulder.y - leftShoulder.y, 2)\n            );\n\n            // Return normalized landmarks\n            return landmarks.map(landmark => ({\n                x: (landmark.x - shoulderCenterX) / shoulderWidth,\n                y: (landmark.y - shoulderCenterY) / shoulderWidth,\n                visibility: landmark.visibility\n            }));\n        };\n\n        // Normalize both poses\n        const normalizedUser = normalizePose(userLandmarks);\n        const normalizedTarget = normalizePose(targetPose.landmarks);\n\n        let segmentAccuracies = {};\n        let visibleSegments = 0;\n\n        // Calculate accuracy for each body segment\n        for (const [segment, points] of Object.entries(bodySegments)) {\n            // Check if required points are visible\n            const requiredVisible = requiredPoints[segment].every(index => {\n                const userPoint = normalizedUser[index];\n                const targetPoint = normalizedTarget[index];\n                return userPoint.visibility > 0.5 && targetPoint.visibility > 0.5;\n            });\n\n            if (!requiredVisible) {\n                continue; // Skip this segment if required points aren't visible\n            }\n\n            let segmentTotal = 0;\n            let segmentPoints = 0;\n\n            // Calculate accuracies for points\n            points.forEach(index => {\n                const userLandmark = normalizedUser[index];\n                const targetLandmark = normalizedTarget[index];\n\n                // Check if point is visible enough in both poses\n                if (userLandmark.visibility > 0.5 && targetLandmark.visibility > 0.5) {\n                    // Calculate angle between points relative to shoulder center\n                    const userAngle = Math.atan2(userLandmark.y, userLandmark.x);\n                    const targetAngle = Math.atan2(targetLandmark.y, targetLandmark.x);\n                    const angleDiff = Math.abs(userAngle - targetAngle);\n\n                    // Calculate position difference\n                    const distance = Math.sqrt(\n                        Math.pow(userLandmark.x - targetLandmark.x, 2) +\n                        Math.pow(userLandmark.y - targetLandmark.y, 2)\n                    );\n\n                    // Combine angle and distance accuracy\n                    const angleAccuracy = Math.max(0, 1 - (angleDiff / Math.PI));\n                    const distanceAccuracy = Math.max(0, 1 - (distance / 0.5));\n                    const pointAccuracy = (angleAccuracy * 0.7 + distanceAccuracy * 0.3);\n\n                    // Add to segment total with visibility weight\n                    const weight = Math.min(userLandmark.visibility, targetLandmark.visibility);\n                    segmentTotal += pointAccuracy * weight;\n                    segmentPoints += weight;\n                }\n            });\n\n            // Calculate segment accuracy if we have points\n            if (segmentPoints > 0) {\n                const rawAccuracy = (segmentTotal / segmentPoints) * 100;\n                segmentAccuracies[segment] = {\n                    accuracy: Math.min(100, Math.max(0, rawAccuracy)),\n                    visibility: segmentPoints / points.length\n                };\n                visibleSegments++;\n            }\n        }\n\n        // Calculate overall accuracy\n        if (visibleSegments === 0) return { total: 0, segments: {} };\n\n        let totalAccuracy = 0;\n        let totalWeight = 0;\n\n        // Weight segments differently\n        const segmentWeights = {\n            head: 1,\n            upperBody: 1.2,\n            torso: 1.2,\n            lowerBody: 1\n        };\n\n        for (const [segment, data] of Object.entries(segmentAccuracies)) {\n            const weight = segmentWeights[segment] * data.visibility;\n            totalAccuracy += data.accuracy * weight;\n            totalWeight += weight;\n        }\n\n        return {\n            total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n            segments: segmentAccuracies\n        };\n    };\n\n    const onResults = useCallback((results) => {\n        if (!canvasRef.current || !results.poseLandmarks) return;\n\n        const canvasElement = canvasRef.current;\n        const canvasCtx = canvasElement.getContext('2d');\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight;\n\n        // Set canvas dimensions to match video\n        canvasElement.width = videoWidth;\n        canvasElement.height = videoHeight;\n\n        // Calculate pose accuracy if we have a selected pose\n        if (selectedPose && selectedPose.landmarks) {\n            const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n            setPoseAccuracy(accuracyData.total);\n            setSegmentAccuracies(accuracyData.segments);\n        }\n\n        // Clear canvas\n        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n        // Draw pose landmarks\n        if (results.poseLandmarks) {\n            // Draw the pose landmarks\n            canvasCtx.save();\n            canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n            // Mirror the canvas context\n            canvasCtx.scale(-1, 1);\n            canvasCtx.translate(-videoWidth, 0);\n\n            // Draw connectors\n            canvasCtx.lineWidth = 3;\n\n            // Draw pose connections\n            function drawConnection(landmarks, start, end, color) {\n                const startPoint = landmarks[start];\n                const endPoint = landmarks[end];\n\n                if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n                    canvasCtx.beginPath();\n                    canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n                    canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n                    canvasCtx.strokeStyle = color;\n                    canvasCtx.stroke();\n                }\n            }\n\n            const landmarks = results.poseLandmarks;\n\n            // Draw body parts with different colors\n            // Upper body (green)\n            const upperBodyColor = '#00FF00';\n            drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\n            drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n            drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n            drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n            drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n\n            // Head (red)\n            const headColor = '#FF0000';\n            drawConnection(landmarks, 0, 1, headColor);\n            drawConnection(landmarks, 1, 2, headColor);\n            drawConnection(landmarks, 2, 3, headColor);\n            drawConnection(landmarks, 3, 7, headColor);\n            drawConnection(landmarks, 0, 4, headColor);\n            drawConnection(landmarks, 4, 5, headColor);\n            drawConnection(landmarks, 5, 6, headColor);\n            drawConnection(landmarks, 6, 8, headColor);\n\n            // Torso (blue)\n            const torsoColor = '#0000FF';\n            drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n            drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n            drawConnection(landmarks, 23, 24, torsoColor); // hips\n\n            // Lower body (yellow)\n            const lowerBodyColor = '#FFFF00';\n            drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n            drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n            drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n            drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n\n            // Draw landmarks\n            landmarks.forEach((landmark, index) => {\n                if (landmark.visibility > 0.5) {\n                    canvasCtx.beginPath();\n                    canvasCtx.arc(\n                        landmark.x * videoWidth,\n                        landmark.y * videoHeight,\n                        5,\n                        0,\n                        2 * Math.PI\n                    );\n                    canvasCtx.fillStyle = '#FFFFFF';\n                    canvasCtx.fill();\n                    canvasCtx.strokeStyle = '#000000';\n                    canvasCtx.stroke();\n                }\n            });\n\n            canvasCtx.restore();\n        }\n    }, [selectedPose]);\n\n    useEffect(() => {\n        let pose = null;\n        let camera = null;\n\n        const initializePose = async () => {\n            try {\n                pose = new Pose({\n                    locateFile: (file) => {\n                        return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n                    }\n                });\n\n                pose.setOptions({\n                    modelComplexity: 1,\n                    smoothLandmarks: true,\n                    enableSegmentation: false,\n                    smoothSegmentation: false,\n                    minDetectionConfidence: 0.5,\n                    minTrackingConfidence: 0.5\n                });\n\n                pose.onResults(onResults);\n\n                if (webcamRef.current && webcamRef.current.video) {\n                    camera = new Camera(webcamRef.current.video, {\n                        onFrame: async () => {\n                            if (webcamRef.current && webcamRef.current.video) {\n                                await pose.send({ image: webcamRef.current.video });\n                            }\n                        },\n                        width: 640,\n                        height: 480\n                    });\n\n                    camera.start();\n                    setIsLoading(false);\n                }\n            } catch (err) {\n                console.error('Error initializing pose detection:', err);\n                setError('Failed to initialize pose detection. Please try refreshing the page.');\n                setIsLoading(false);\n            }\n        };\n\n        initializePose();\n\n        return () => {\n            if (camera) {\n                camera.stop();\n            }\n            if (pose) {\n                pose.close();\n            }\n        };\n    }, [onResults]);\n\n    useEffect(() => {\n        // Initialize WebSocket connection\n        const ws = new WebSocket('ws://localhost:8000/ws/pose-feedback');\n\n        ws.onopen = () => {\n            console.log('Connected to feedback server');\n            setWsConnection(ws);\n        };\n\n        ws.onmessage = (event) => {\n            setPoseFeedback(event.data);\n        };\n\n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        return () => {\n            if (ws) {\n                ws.close();\n            }\n        };\n    }, []);\n\n    // Send pose data to backend when accuracy updates\n    useEffect(() => {\n        if (wsConnection && selectedPose && Object.keys(segmentAccuracies).length > 0) {\n            const poseData = {\n                pose_name: selectedPose.name || 'unknown pose',\n                overall_accuracy: poseAccuracy,\n                segment_accuracies: segmentAccuracies\n            };\n            wsConnection.send(JSON.stringify(poseData));\n        }\n    }, [poseAccuracy, segmentAccuracies, selectedPose, wsConnection]);\n\n    return (\n        <div className=\"pose-tracker\">\n            {isLoading && (\n                <div className=\"loading\">\n                    <p>Loading pose detector... Please wait a moment.</p>\n                    <p style={{ fontSize: '0.9em', color: '#666' }}>\n                        This may take a few seconds to initialize.\n                    </p>\n                </div>\n            )}\n            {error && (\n                <div className=\"error\">\n                    <p>{error}</p>\n                    <button\n                        onClick={() => window.location.reload()}\n                        style={{\n                            marginTop: '10px',\n                            padding: '8px 16px',\n                            backgroundColor: '#4CAF50',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '4px',\n                            cursor: 'pointer',\n                        }}\n                    >\n                        Retry\n                    </button>\n                </div>\n            )}\n            <div className=\"camera-container\">\n                <Webcam\n                    ref={webcamRef}\n                    className=\"webcam\"\n                    mirrored={true}\n                    videoConstraints={videoConstraints}\n                />\n                <canvas ref={canvasRef} className=\"pose-canvas\" />\n                {selectedPose && selectedPose.landmarks && Object.keys(segmentAccuracies).length > 0 && (\n                    <div className=\"accuracy-display\" style={{\n                        position: 'absolute',\n                        top: '20px',\n                        left: '20px',\n                        background: 'rgba(0, 0, 0, 0.7)',\n                        color: 'white',\n                        padding: '15px',\n                        borderRadius: '5px',\n                        fontSize: '1.1em',\n                        zIndex: 1000\n                    }}>\n                        <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>\n                            Overall Accuracy: {poseAccuracy}%\n                        </div>\n                        <div style={{ fontSize: '0.9em' }}>\n                            {Object.entries(segmentAccuracies).map(([segment, data]) => (\n                                <div key={segment} style={{ marginBottom: '5px' }}>\n                                    {segment.charAt(0).toUpperCase() + segment.slice(1)}: {Math.round(data.accuracy)}%\n                                </div>\n                            ))}\n                        </div>\n                        {poseFeedback && (\n                            <div style={{\n                                marginTop: '15px',\n                                padding: '10px',\n                                borderTop: '1px solid rgba(255, 255, 255, 0.3)',\n                                fontSize: '0.9em',\n                                maxWidth: '300px'\n                            }}>\n                                <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>Instructor Feedback:</div>\n                                {poseFeedback}\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PoseTracker;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAMC,SAAS,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMa,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,OAAO,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACmB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMyB,gBAAgB,GAAG;IACrBC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,UAAU,EAAE;EAChB,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAACC,aAAa,EAAEC,UAAU,KAAK;IACzD,IAAI,CAACA,UAAU,IAAI,CAACD,aAAa,EAAE,OAAO;MAAEE,KAAK,EAAE,CAAC;MAAEC,QAAQ,EAAE,CAAC;IAAE,CAAC;;IAEpE;IACA,MAAMC,YAAY,GAAG;MACjBC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MACxCC,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAE;MACrCC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAE;MACzBC,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC;;IAED;IACA,MAAMC,cAAc,GAAG;MACnBJ,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE;MACjBC,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAAE;MACrBC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAE;MACzBC,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;;IAED;IACA,MAAME,aAAa,GAAIC,SAAS,IAAK;MACjC;MACA,MAAMC,YAAY,GAAGD,SAAS,CAAC,EAAE,CAAC;MAClC,MAAME,aAAa,GAAGF,SAAS,CAAC,EAAE,CAAC;;MAEnC;MACA,MAAMG,eAAe,GAAG,CAACF,YAAY,CAACG,CAAC,GAAGF,aAAa,CAACE,CAAC,IAAI,CAAC;MAC9D,MAAMC,eAAe,GAAG,CAACJ,YAAY,CAACK,CAAC,GAAGJ,aAAa,CAACI,CAAC,IAAI,CAAC;MAC9D,MAAMC,aAAa,GAAGC,IAAI,CAACC,IAAI,CAC3BD,IAAI,CAACE,GAAG,CAACR,aAAa,CAACE,CAAC,GAAGH,YAAY,CAACG,CAAC,EAAE,CAAC,CAAC,GAC7CI,IAAI,CAACE,GAAG,CAACR,aAAa,CAACI,CAAC,GAAGL,YAAY,CAACK,CAAC,EAAE,CAAC,CAChD,CAAC;;MAED;MACA,OAAON,SAAS,CAACW,GAAG,CAACC,QAAQ,KAAK;QAC9BR,CAAC,EAAE,CAACQ,QAAQ,CAACR,CAAC,GAAGD,eAAe,IAAII,aAAa;QACjDD,CAAC,EAAE,CAACM,QAAQ,CAACN,CAAC,GAAGD,eAAe,IAAIE,aAAa;QACjDM,UAAU,EAAED,QAAQ,CAACC;MACzB,CAAC,CAAC,CAAC;IACP,CAAC;;IAED;IACA,MAAMC,cAAc,GAAGf,aAAa,CAACV,aAAa,CAAC;IACnD,MAAM0B,gBAAgB,GAAGhB,aAAa,CAACT,UAAU,CAACU,SAAS,CAAC;IAE5D,IAAItB,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAIsC,eAAe,GAAG,CAAC;;IAEvB;IACA,KAAK,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAC3B,YAAY,CAAC,EAAE;MAC1D;MACA,MAAM4B,eAAe,GAAGvB,cAAc,CAACmB,OAAO,CAAC,CAACK,KAAK,CAACC,KAAK,IAAI;QAC3D,MAAMC,SAAS,GAAGV,cAAc,CAACS,KAAK,CAAC;QACvC,MAAME,WAAW,GAAGV,gBAAgB,CAACQ,KAAK,CAAC;QAC3C,OAAOC,SAAS,CAACX,UAAU,GAAG,GAAG,IAAIY,WAAW,CAACZ,UAAU,GAAG,GAAG;MACrE,CAAC,CAAC;MAEF,IAAI,CAACQ,eAAe,EAAE;QAClB,SAAS,CAAC;MACd;MAEA,IAAIK,YAAY,GAAG,CAAC;MACpB,IAAIC,aAAa,GAAG,CAAC;;MAErB;MACAT,MAAM,CAACU,OAAO,CAACL,KAAK,IAAI;QACpB,MAAMM,YAAY,GAAGf,cAAc,CAACS,KAAK,CAAC;QAC1C,MAAMO,cAAc,GAAGf,gBAAgB,CAACQ,KAAK,CAAC;;QAE9C;QACA,IAAIM,YAAY,CAAChB,UAAU,GAAG,GAAG,IAAIiB,cAAc,CAACjB,UAAU,GAAG,GAAG,EAAE;UAClE;UACA,MAAMkB,SAAS,GAAGvB,IAAI,CAACwB,KAAK,CAACH,YAAY,CAACvB,CAAC,EAAEuB,YAAY,CAACzB,CAAC,CAAC;UAC5D,MAAM6B,WAAW,GAAGzB,IAAI,CAACwB,KAAK,CAACF,cAAc,CAACxB,CAAC,EAAEwB,cAAc,CAAC1B,CAAC,CAAC;UAClE,MAAM8B,SAAS,GAAG1B,IAAI,CAAC2B,GAAG,CAACJ,SAAS,GAAGE,WAAW,CAAC;;UAEnD;UACA,MAAMG,QAAQ,GAAG5B,IAAI,CAACC,IAAI,CACtBD,IAAI,CAACE,GAAG,CAACmB,YAAY,CAACzB,CAAC,GAAG0B,cAAc,CAAC1B,CAAC,EAAE,CAAC,CAAC,GAC9CI,IAAI,CAACE,GAAG,CAACmB,YAAY,CAACvB,CAAC,GAAGwB,cAAc,CAACxB,CAAC,EAAE,CAAC,CACjD,CAAC;;UAED;UACA,MAAM+B,aAAa,GAAG7B,IAAI,CAAC8B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAIJ,SAAS,GAAG1B,IAAI,CAAC+B,EAAG,CAAC;UAC5D,MAAMC,gBAAgB,GAAGhC,IAAI,CAAC8B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAIF,QAAQ,GAAG,GAAI,CAAC;UAC1D,MAAMK,aAAa,GAAIJ,aAAa,GAAG,GAAG,GAAGG,gBAAgB,GAAG,GAAI;;UAEpE;UACA,MAAME,MAAM,GAAGlC,IAAI,CAACmC,GAAG,CAACd,YAAY,CAAChB,UAAU,EAAEiB,cAAc,CAACjB,UAAU,CAAC;UAC3Ea,YAAY,IAAIe,aAAa,GAAGC,MAAM;UACtCf,aAAa,IAAIe,MAAM;QAC3B;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIf,aAAa,GAAG,CAAC,EAAE;QACnB,MAAMiB,WAAW,GAAIlB,YAAY,GAAGC,aAAa,GAAI,GAAG;QACxDjD,iBAAiB,CAACuC,OAAO,CAAC,GAAG;UACzB4B,QAAQ,EAAErC,IAAI,CAACmC,GAAG,CAAC,GAAG,EAAEnC,IAAI,CAAC8B,GAAG,CAAC,CAAC,EAAEM,WAAW,CAAC,CAAC;UACjD/B,UAAU,EAAEc,aAAa,GAAGT,MAAM,CAAC4B;QACvC,CAAC;QACD9B,eAAe,EAAE;MACrB;IACJ;;IAEA;IACA,IAAIA,eAAe,KAAK,CAAC,EAAE,OAAO;MAAEzB,KAAK,EAAE,CAAC;MAAEC,QAAQ,EAAE,CAAC;IAAE,CAAC;IAE5D,IAAIuD,aAAa,GAAG,CAAC;IACrB,IAAIC,WAAW,GAAG,CAAC;;IAEnB;IACA,MAAMC,cAAc,GAAG;MACnBvD,IAAI,EAAE,CAAC;MACPC,SAAS,EAAE,GAAG;MACdC,KAAK,EAAE,GAAG;MACVC,SAAS,EAAE;IACf,CAAC;IAED,KAAK,MAAM,CAACoB,OAAO,EAAEiC,IAAI,CAAC,IAAI/B,MAAM,CAACC,OAAO,CAAC1C,iBAAiB,CAAC,EAAE;MAC7D,MAAMgE,MAAM,GAAGO,cAAc,CAAChC,OAAO,CAAC,GAAGiC,IAAI,CAACrC,UAAU;MACxDkC,aAAa,IAAIG,IAAI,CAACL,QAAQ,GAAGH,MAAM;MACvCM,WAAW,IAAIN,MAAM;IACzB;IAEA,OAAO;MACHnD,KAAK,EAAEiB,IAAI,CAAC2C,KAAK,CAACH,WAAW,GAAG,CAAC,GAAGD,aAAa,GAAGC,WAAW,GAAG,CAAC,CAAC;MACpExD,QAAQ,EAAEd;IACd,CAAC;EACL,CAAC;EAED,MAAM0E,SAAS,GAAG5F,WAAW,CAAE6F,OAAO,IAAK;IACvC,IAAI,CAACnF,SAAS,CAACoF,OAAO,IAAI,CAACD,OAAO,CAACE,aAAa,EAAE;IAElD,MAAMC,aAAa,GAAGtF,SAAS,CAACoF,OAAO;IACvC,MAAMG,SAAS,GAAGD,aAAa,CAACE,UAAU,CAAC,IAAI,CAAC;IAChD,MAAMC,UAAU,GAAG1F,SAAS,CAACqF,OAAO,CAACM,KAAK,CAACD,UAAU;IACrD,MAAME,WAAW,GAAG5F,SAAS,CAACqF,OAAO,CAACM,KAAK,CAACC,WAAW;;IAEvD;IACAL,aAAa,CAACvE,KAAK,GAAG0E,UAAU;IAChCH,aAAa,CAACtE,MAAM,GAAG2E,WAAW;;IAElC;IACA,IAAI9F,YAAY,IAAIA,YAAY,CAACiC,SAAS,EAAE;MACxC,MAAM8D,YAAY,GAAG1E,qBAAqB,CAACiE,OAAO,CAACE,aAAa,EAAExF,YAAY,CAAC;MAC/EU,eAAe,CAACqF,YAAY,CAACvE,KAAK,CAAC;MACnCZ,oBAAoB,CAACmF,YAAY,CAACtE,QAAQ,CAAC;IAC/C;;IAEA;IACAiE,SAAS,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEP,aAAa,CAACvE,KAAK,EAAEuE,aAAa,CAACtE,MAAM,CAAC;;IAEpE;IACA,IAAImE,OAAO,CAACE,aAAa,EAAE;MACvB;MACAE,SAAS,CAACO,IAAI,CAAC,CAAC;MAChBP,SAAS,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEP,aAAa,CAACvE,KAAK,EAAEuE,aAAa,CAACtE,MAAM,CAAC;;MAEpE;MACAuE,SAAS,CAACQ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACtBR,SAAS,CAACS,SAAS,CAAC,CAACP,UAAU,EAAE,CAAC,CAAC;;MAEnC;MACAF,SAAS,CAACU,SAAS,GAAG,CAAC;;MAEvB;MACA,SAASC,cAAcA,CAACpE,SAAS,EAAEqE,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAE;QAClD,MAAMC,UAAU,GAAGxE,SAAS,CAACqE,KAAK,CAAC;QACnC,MAAMI,QAAQ,GAAGzE,SAAS,CAACsE,GAAG,CAAC;QAE/B,IAAIE,UAAU,CAAC3D,UAAU,GAAG,GAAG,IAAI4D,QAAQ,CAAC5D,UAAU,GAAG,GAAG,EAAE;UAC1D4C,SAAS,CAACiB,SAAS,CAAC,CAAC;UACrBjB,SAAS,CAACkB,MAAM,CAACH,UAAU,CAACpE,CAAC,GAAGuD,UAAU,EAAEa,UAAU,CAAClE,CAAC,GAAGuD,WAAW,CAAC;UACvEJ,SAAS,CAACmB,MAAM,CAACH,QAAQ,CAACrE,CAAC,GAAGuD,UAAU,EAAEc,QAAQ,CAACnE,CAAC,GAAGuD,WAAW,CAAC;UACnEJ,SAAS,CAACoB,WAAW,GAAGN,KAAK;UAC7Bd,SAAS,CAACqB,MAAM,CAAC,CAAC;QACtB;MACJ;MAEA,MAAM9E,SAAS,GAAGqD,OAAO,CAACE,aAAa;;MAEvC;MACA;MACA,MAAMwB,cAAc,GAAG,SAAS;MAChCX,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE+E,cAAc,CAAC,CAAC,CAAC;MACnDX,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE+E,cAAc,CAAC,CAAC,CAAC;MACnDX,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE+E,cAAc,CAAC,CAAC,CAAC;MACnDX,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE+E,cAAc,CAAC,CAAC,CAAC;MACnDX,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE+E,cAAc,CAAC,CAAC,CAAC;;MAEnD;MACA,MAAMC,SAAS,GAAG,SAAS;MAC3BZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;MAC1CZ,cAAc,CAACpE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEgF,SAAS,CAAC;;MAE1C;MACA,MAAMC,UAAU,GAAG,SAAS;MAC5Bb,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEiF,UAAU,CAAC,CAAC,CAAC;MAC/Cb,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEiF,UAAU,CAAC,CAAC,CAAC;MAC/Cb,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEiF,UAAU,CAAC,CAAC,CAAC;;MAE/C;MACA,MAAMC,cAAc,GAAG,SAAS;MAChCd,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEkF,cAAc,CAAC,CAAC,CAAC;MACnDd,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEkF,cAAc,CAAC,CAAC,CAAC;MACnDd,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEkF,cAAc,CAAC,CAAC,CAAC;MACnDd,cAAc,CAACpE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAEkF,cAAc,CAAC,CAAC,CAAC;;MAEnD;MACAlF,SAAS,CAAC4B,OAAO,CAAC,CAAChB,QAAQ,EAAEW,KAAK,KAAK;QACnC,IAAIX,QAAQ,CAACC,UAAU,GAAG,GAAG,EAAE;UAC3B4C,SAAS,CAACiB,SAAS,CAAC,CAAC;UACrBjB,SAAS,CAAC0B,GAAG,CACTvE,QAAQ,CAACR,CAAC,GAAGuD,UAAU,EACvB/C,QAAQ,CAACN,CAAC,GAAGuD,WAAW,EACxB,CAAC,EACD,CAAC,EACD,CAAC,GAAGrD,IAAI,CAAC+B,EACb,CAAC;UACDkB,SAAS,CAAC2B,SAAS,GAAG,SAAS;UAC/B3B,SAAS,CAAC4B,IAAI,CAAC,CAAC;UAChB5B,SAAS,CAACoB,WAAW,GAAG,SAAS;UACjCpB,SAAS,CAACqB,MAAM,CAAC,CAAC;QACtB;MACJ,CAAC,CAAC;MAEFrB,SAAS,CAAC6B,OAAO,CAAC,CAAC;IACvB;EACJ,CAAC,EAAE,CAACvH,YAAY,CAAC,CAAC;EAElBT,SAAS,CAAC,MAAM;IACZ,IAAIiI,IAAI,GAAG,IAAI;IACf,IAAIC,MAAM,GAAG,IAAI;IAEjB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACAF,IAAI,GAAG,IAAI5H,IAAI,CAAC;UACZ+H,UAAU,EAAGC,IAAI,IAAK;YAClB,OAAO,gDAAgDA,IAAI,EAAE;UACjE;QACJ,CAAC,CAAC;QAEFJ,IAAI,CAACK,UAAU,CAAC;UACZC,eAAe,EAAE,CAAC;UAClBC,eAAe,EAAE,IAAI;UACrBC,kBAAkB,EAAE,KAAK;UACzBC,kBAAkB,EAAE,KAAK;UACzBC,sBAAsB,EAAE,GAAG;UAC3BC,qBAAqB,EAAE;QAC3B,CAAC,CAAC;QAEFX,IAAI,CAACnC,SAAS,CAACA,SAAS,CAAC;QAEzB,IAAInF,SAAS,CAACqF,OAAO,IAAIrF,SAAS,CAACqF,OAAO,CAACM,KAAK,EAAE;UAC9C4B,MAAM,GAAG,IAAI9H,MAAM,CAACO,SAAS,CAACqF,OAAO,CAACM,KAAK,EAAE;YACzCuC,OAAO,EAAE,MAAAA,CAAA,KAAY;cACjB,IAAIlI,SAAS,CAACqF,OAAO,IAAIrF,SAAS,CAACqF,OAAO,CAACM,KAAK,EAAE;gBAC9C,MAAM2B,IAAI,CAACa,IAAI,CAAC;kBAAEC,KAAK,EAAEpI,SAAS,CAACqF,OAAO,CAACM;gBAAM,CAAC,CAAC;cACvD;YACJ,CAAC;YACD3E,KAAK,EAAE,GAAG;YACVC,MAAM,EAAE;UACZ,CAAC,CAAC;UAEFsG,MAAM,CAACnB,KAAK,CAAC,CAAC;UACdhG,YAAY,CAAC,KAAK,CAAC;QACvB;MACJ,CAAC,CAAC,OAAOiI,GAAG,EAAE;QACVC,OAAO,CAACjI,KAAK,CAAC,oCAAoC,EAAEgI,GAAG,CAAC;QACxD/H,QAAQ,CAAC,sEAAsE,CAAC;QAChFF,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IAEDoH,cAAc,CAAC,CAAC;IAEhB,OAAO,MAAM;MACT,IAAID,MAAM,EAAE;QACRA,MAAM,CAACgB,IAAI,CAAC,CAAC;MACjB;MACA,IAAIjB,IAAI,EAAE;QACNA,IAAI,CAACkB,KAAK,CAAC,CAAC;MAChB;IACJ,CAAC;EACL,CAAC,EAAE,CAACrD,SAAS,CAAC,CAAC;EAEf9F,SAAS,CAAC,MAAM;IACZ;IACA,MAAMoJ,EAAE,GAAG,IAAIC,SAAS,CAAC,sCAAsC,CAAC;IAEhED,EAAE,CAACE,MAAM,GAAG,MAAM;MACdL,OAAO,CAACM,GAAG,CAAC,8BAA8B,CAAC;MAC3C9H,eAAe,CAAC2H,EAAE,CAAC;IACvB,CAAC;IAEDA,EAAE,CAACI,SAAS,GAAIC,KAAK,IAAK;MACtBlI,eAAe,CAACkI,KAAK,CAAC7D,IAAI,CAAC;IAC/B,CAAC;IAEDwD,EAAE,CAACM,OAAO,GAAI1I,KAAK,IAAK;MACpBiI,OAAO,CAACjI,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C,CAAC;IAED,OAAO,MAAM;MACT,IAAIoI,EAAE,EAAE;QACJA,EAAE,CAACD,KAAK,CAAC,CAAC;MACd;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnJ,SAAS,CAAC,MAAM;IACZ,IAAIwB,YAAY,IAAIf,YAAY,IAAIoD,MAAM,CAAC8F,IAAI,CAACvI,iBAAiB,CAAC,CAACoE,MAAM,GAAG,CAAC,EAAE;MAC3E,MAAMoE,QAAQ,GAAG;QACbC,SAAS,EAAEpJ,YAAY,CAACqJ,IAAI,IAAI,cAAc;QAC9CC,gBAAgB,EAAE7I,YAAY;QAC9B8I,kBAAkB,EAAE5I;MACxB,CAAC;MACDI,YAAY,CAACsH,IAAI,CAACmB,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;IAC/C;EACJ,CAAC,EAAE,CAAC1I,YAAY,EAAEE,iBAAiB,EAAEX,YAAY,EAAEe,YAAY,CAAC,CAAC;EAEjE,oBACIjB,OAAA;IAAK4J,SAAS,EAAC,cAAc;IAAAC,QAAA,GACxBtJ,SAAS,iBACNP,OAAA;MAAK4J,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACpB7J,OAAA;QAAA6J,QAAA,EAAG;MAA8C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrDjK,OAAA;QAAGkK,KAAK,EAAE;UAAEC,QAAQ,EAAE,OAAO;UAAEzD,KAAK,EAAE;QAAO,CAAE;QAAAmD,QAAA,EAAC;MAEhD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACR,EACAxJ,KAAK,iBACFT,OAAA;MAAK4J,SAAS,EAAC,OAAO;MAAAC,QAAA,gBAClB7J,OAAA;QAAA6J,QAAA,EAAIpJ;MAAK;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdjK,OAAA;QACIoK,OAAO,EAAEA,CAAA,KAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE;QACxCL,KAAK,EAAE;UACHM,SAAS,EAAE,MAAM;UACjBC,OAAO,EAAE,UAAU;UACnBC,eAAe,EAAE,SAAS;UAC1BhE,KAAK,EAAE,OAAO;UACdiE,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,KAAK;UACnBC,MAAM,EAAE;QACZ,CAAE;QAAAhB,QAAA,EACL;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR,eACDjK,OAAA;MAAK4J,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B7J,OAAA,CAACJ,MAAM;QACHkL,GAAG,EAAE1K,SAAU;QACfwJ,SAAS,EAAC,QAAQ;QAClBmB,QAAQ,EAAE,IAAK;QACf5J,gBAAgB,EAAEA;MAAiB;QAAA2I,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACFjK,OAAA;QAAQ8K,GAAG,EAAEzK,SAAU;QAACuJ,SAAS,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACjD/J,YAAY,IAAIA,YAAY,CAACiC,SAAS,IAAImB,MAAM,CAAC8F,IAAI,CAACvI,iBAAiB,CAAC,CAACoE,MAAM,GAAG,CAAC,iBAChFjF,OAAA;QAAK4J,SAAS,EAAC,kBAAkB;QAACM,KAAK,EAAE;UACrCc,QAAQ,EAAE,UAAU;UACpBC,GAAG,EAAE,MAAM;UACXC,IAAI,EAAE,MAAM;UACZC,UAAU,EAAE,oBAAoB;UAChCzE,KAAK,EAAE,OAAO;UACd+D,OAAO,EAAE,MAAM;UACfG,YAAY,EAAE,KAAK;UACnBT,QAAQ,EAAE,OAAO;UACjBiB,MAAM,EAAE;QACZ,CAAE;QAAAvB,QAAA,gBACE7J,OAAA;UAAKkK,KAAK,EAAE;YAAEmB,YAAY,EAAE,MAAM;YAAEC,UAAU,EAAE;UAAO,CAAE;UAAAzB,QAAA,GAAC,oBACpC,EAAClJ,YAAY,EAAC,GACpC;QAAA;UAAAmJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNjK,OAAA;UAAKkK,KAAK,EAAE;YAAEC,QAAQ,EAAE;UAAQ,CAAE;UAAAN,QAAA,EAC7BvG,MAAM,CAACC,OAAO,CAAC1C,iBAAiB,CAAC,CAACiC,GAAG,CAAC,CAAC,CAACM,OAAO,EAAEiC,IAAI,CAAC,kBACnDrF,OAAA;YAAmBkK,KAAK,EAAE;cAAEmB,YAAY,EAAE;YAAM,CAAE;YAAAxB,QAAA,GAC7CzG,OAAO,CAACmI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGpI,OAAO,CAACqI,KAAK,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC9I,IAAI,CAAC2C,KAAK,CAACD,IAAI,CAACL,QAAQ,CAAC,EAAC,GACrF;UAAA,GAFU5B,OAAO;YAAA0G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEZ,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EACLlJ,YAAY,iBACTf,OAAA;UAAKkK,KAAK,EAAE;YACRM,SAAS,EAAE,MAAM;YACjBC,OAAO,EAAE,MAAM;YACfiB,SAAS,EAAE,oCAAoC;YAC/CvB,QAAQ,EAAE,OAAO;YACjBwB,QAAQ,EAAE;UACd,CAAE;UAAA9B,QAAA,gBACE7J,OAAA;YAAKkK,KAAK,EAAE;cAAEoB,UAAU,EAAE,MAAM;cAAED,YAAY,EAAE;YAAM,CAAE;YAAAxB,QAAA,EAAC;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAClFlJ,YAAY;QAAA;UAAA+I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC9J,EAAA,CAtaIF,WAAW;AAAA2L,EAAA,GAAX3L,WAAW;AAwajB,eAAeA,WAAW;AAAC,IAAA2L,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}