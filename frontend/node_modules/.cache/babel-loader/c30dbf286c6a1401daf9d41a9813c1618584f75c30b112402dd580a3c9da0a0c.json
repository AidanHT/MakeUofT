{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quant\\\\Documents\\\\Programming\\\\Projects\\\\Hackathon\\\\MakeUofT\\\\frontend\\\\src\\\\components\\\\PoseTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTracker = ({\n  selectedPose\n}) => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const poseRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poseAccuracy, setPoseAccuracy] = useState(0);\n  const videoConstraints = {\n    width: 640,\n    height: 480,\n    facingMode: 'user'\n  };\n  const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n    if (!targetPose || !userLandmarks) return 0;\n\n    // Define body segments with their corresponding landmark indices\n    const bodySegments = {\n      head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      upperBody: [11, 12, 13, 14, 15, 16],\n      // shoulders, elbows, wrists\n      torso: [11, 12, 23, 24],\n      // shoulders to hips\n      lowerBody: [23, 24, 25, 26, 27, 28, 29, 30, 31, 32] // hips to ankles\n    };\n    let segmentAccuracies = {};\n    let visibleSegments = 0;\n\n    // Calculate accuracy for each body segment\n    for (const [segment, points] of Object.entries(bodySegments)) {\n      let segmentTotal = 0;\n      let segmentPoints = 0;\n      let visiblePoints = 0;\n      points.forEach(index => {\n        const userLandmark = userLandmarks[index];\n        const targetLandmark = targetPose.landmarks[index];\n\n        // Check if both points are visible enough\n        if (userLandmark.visibility > 0.5 && targetLandmark.visibility > 0.5) {\n          visiblePoints++;\n\n          // Calculate Euclidean distance for x and y coordinates\n          const distance = Math.sqrt(Math.pow(userLandmark.x - targetLandmark.x, 2) + Math.pow(userLandmark.y - targetLandmark.y, 2));\n\n          // Convert distance to accuracy (closer = higher accuracy)\n          const pointAccuracy = Math.max(0, 1 - distance / 0.1);\n          segmentTotal += pointAccuracy;\n          segmentPoints++;\n        }\n      });\n\n      // Calculate segment visibility percentage\n      const visibilityThreshold = 0.3; // Consider segment visible if 30% of points are visible\n      const visibilityPercentage = visiblePoints / points.length;\n\n      // Only include segment if enough points are visible\n      if (visibilityPercentage > visibilityThreshold && segmentPoints > 0) {\n        segmentAccuracies[segment] = {\n          accuracy: segmentTotal / segmentPoints * 100,\n          visibility: visibilityPercentage\n        };\n        visibleSegments++;\n      }\n    }\n\n    // If no segments are visible, return 0\n    if (visibleSegments === 0) return 0;\n\n    // Calculate weighted average of visible segment accuracies\n    let totalAccuracy = 0;\n    for (const segmentData of Object.values(segmentAccuracies)) {\n      totalAccuracy += segmentData.accuracy;\n    }\n\n    // Return average accuracy of visible segments\n    return Math.round(totalAccuracy / visibleSegments);\n  };\n  const onResults = useCallback(results => {\n    if (!canvasRef.current || !results.poseLandmarks) return;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext('2d');\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas dimensions to match video\n    canvasElement.width = videoWidth;\n    canvasElement.height = videoHeight;\n\n    // Calculate pose accuracy if we have a selected pose\n    if (selectedPose) {\n      const accuracy = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n      setPoseAccuracy(accuracy);\n    }\n\n    // Clear canvas\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    // Draw pose landmarks\n    if (results.poseLandmarks) {\n      // Draw the pose landmarks\n      canvasCtx.save();\n      canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n      // Mirror the canvas context\n      canvasCtx.scale(-1, 1);\n      canvasCtx.translate(-videoWidth, 0);\n\n      // Draw connectors\n      canvasCtx.lineWidth = 3;\n\n      // Draw pose connections\n      function drawConnection(landmarks, start, end, color) {\n        const startPoint = landmarks[start];\n        const endPoint = landmarks[end];\n        if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n          canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n          canvasCtx.strokeStyle = color;\n          canvasCtx.stroke();\n        }\n      }\n      const landmarks = results.poseLandmarks;\n\n      // Draw body parts with different colors\n      // Upper body (green)\n      const upperBodyColor = '#00FF00';\n      drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\n      drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n      drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n      drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n      drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n\n      // Head (red)\n      const headColor = '#FF0000';\n      drawConnection(landmarks, 0, 1, headColor);\n      drawConnection(landmarks, 1, 2, headColor);\n      drawConnection(landmarks, 2, 3, headColor);\n      drawConnection(landmarks, 3, 7, headColor);\n      drawConnection(landmarks, 0, 4, headColor);\n      drawConnection(landmarks, 4, 5, headColor);\n      drawConnection(landmarks, 5, 6, headColor);\n      drawConnection(landmarks, 6, 8, headColor);\n\n      // Torso (blue)\n      const torsoColor = '#0000FF';\n      drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n      drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n      drawConnection(landmarks, 23, 24, torsoColor); // hips\n\n      // Lower body (yellow)\n      const lowerBodyColor = '#FFFF00';\n      drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n      drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n      drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n      drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n\n      // Draw landmarks\n      landmarks.forEach((landmark, index) => {\n        if (landmark.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.arc(landmark.x * videoWidth, landmark.y * videoHeight, 5, 0, 2 * Math.PI);\n          canvasCtx.fillStyle = '#FFFFFF';\n          canvasCtx.fill();\n          canvasCtx.strokeStyle = '#000000';\n          canvasCtx.stroke();\n        }\n      });\n      canvasCtx.restore();\n    }\n  }, [selectedPose]);\n  useEffect(() => {\n    let pose = null;\n    let camera = null;\n    const initializePose = async () => {\n      try {\n        pose = new Pose({\n          locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n          }\n        });\n        pose.setOptions({\n          modelComplexity: 1,\n          smoothLandmarks: true,\n          enableSegmentation: false,\n          smoothSegmentation: false,\n          minDetectionConfidence: 0.5,\n          minTrackingConfidence: 0.5\n        });\n        pose.onResults(onResults);\n        if (webcamRef.current && webcamRef.current.video) {\n          camera = new Camera(webcamRef.current.video, {\n            onFrame: async () => {\n              if (webcamRef.current && webcamRef.current.video) {\n                await pose.send({\n                  image: webcamRef.current.video\n                });\n              }\n            },\n            width: 640,\n            height: 480\n          });\n          camera.start();\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Error initializing pose detection:', err);\n        setError('Failed to initialize pose detection. Please try refreshing the page.');\n        setIsLoading(false);\n      }\n    };\n    initializePose();\n    return () => {\n      if (camera) {\n        camera.stop();\n      }\n      if (pose) {\n        pose.close();\n      }\n    };\n  }, [onResults]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pose-tracker\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading pose detector... Please wait a moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '0.9em',\n          color: '#666'\n        },\n        children: \"This may take a few seconds to initialize.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        style: {\n          marginTop: '10px',\n          padding: '8px 16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-container\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        className: \"webcam\",\n        mirrored: true,\n        videoConstraints: videoConstraints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"pose-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), selectedPose && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accuracy-display\",\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          background: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '10px',\n          borderRadius: '5px',\n          fontSize: '1.2em'\n        },\n        children: [\"Pose Accuracy: \", poseAccuracy, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n};\n_s(PoseTracker, \"LnTmPtxLswYsVaomc4ofD26+Ew4=\");\n_c = PoseTracker;\nexport default PoseTracker;\nvar _c;\n$RefreshReg$(_c, \"PoseTracker\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Webcam","Camera","Pose","jsxDEV","_jsxDEV","PoseTracker","selectedPose","_s","webcamRef","canvasRef","poseRef","isLoading","setIsLoading","error","setError","poseAccuracy","setPoseAccuracy","videoConstraints","width","height","facingMode","calculatePoseAccuracy","userLandmarks","targetPose","bodySegments","head","upperBody","torso","lowerBody","segmentAccuracies","visibleSegments","segment","points","Object","entries","segmentTotal","segmentPoints","visiblePoints","forEach","index","userLandmark","targetLandmark","landmarks","visibility","distance","Math","sqrt","pow","x","y","pointAccuracy","max","visibilityThreshold","visibilityPercentage","length","accuracy","totalAccuracy","segmentData","values","round","onResults","results","current","poseLandmarks","canvasElement","canvasCtx","getContext","videoWidth","video","videoHeight","clearRect","save","scale","translate","lineWidth","drawConnection","start","end","color","startPoint","endPoint","beginPath","moveTo","lineTo","strokeStyle","stroke","upperBodyColor","headColor","torsoColor","lowerBodyColor","landmark","arc","PI","fillStyle","fill","restore","pose","camera","initializePose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","onFrame","send","image","err","console","stop","close","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","onClick","window","location","reload","marginTop","padding","backgroundColor","border","borderRadius","cursor","ref","mirrored","position","top","left","background","_c","$RefreshReg$"],"sources":["C:/Users/Quant/Documents/Programming/Projects/Hackathon/MakeUofT/frontend/src/components/PoseTracker.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport { Camera } from '@mediapipe/camera_utils';\r\nimport { Pose } from '@mediapipe/pose';\r\nimport './PoseTracker.css';\r\n\r\nconst PoseTracker = ({ selectedPose }) => {\r\n    const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const poseRef = useRef(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [poseAccuracy, setPoseAccuracy] = useState(0);\r\n\r\n    const videoConstraints = {\r\n        width: 640,\r\n        height: 480,\r\n        facingMode: 'user',\r\n    };\r\n\r\n    const calculatePoseAccuracy = (userLandmarks, targetPose) => {\r\n        if (!targetPose || !userLandmarks) return 0;\r\n\r\n        // Define body segments with their corresponding landmark indices\r\n        const bodySegments = {\r\n            head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            upperBody: [11, 12, 13, 14, 15, 16], // shoulders, elbows, wrists\r\n            torso: [11, 12, 23, 24], // shoulders to hips\r\n            lowerBody: [23, 24, 25, 26, 27, 28, 29, 30, 31, 32] // hips to ankles\r\n        };\r\n\r\n        let segmentAccuracies = {};\r\n        let visibleSegments = 0;\r\n\r\n        // Calculate accuracy for each body segment\r\n        for (const [segment, points] of Object.entries(bodySegments)) {\r\n            let segmentTotal = 0;\r\n            let segmentPoints = 0;\r\n            let visiblePoints = 0;\r\n\r\n            points.forEach(index => {\r\n                const userLandmark = userLandmarks[index];\r\n                const targetLandmark = targetPose.landmarks[index];\r\n\r\n                // Check if both points are visible enough\r\n                if (userLandmark.visibility > 0.5 && targetLandmark.visibility > 0.5) {\r\n                    visiblePoints++;\r\n\r\n                    // Calculate Euclidean distance for x and y coordinates\r\n                    const distance = Math.sqrt(\r\n                        Math.pow(userLandmark.x - targetLandmark.x, 2) +\r\n                        Math.pow(userLandmark.y - targetLandmark.y, 2)\r\n                    );\r\n\r\n                    // Convert distance to accuracy (closer = higher accuracy)\r\n                    const pointAccuracy = Math.max(0, 1 - (distance / 0.1));\r\n                    segmentTotal += pointAccuracy;\r\n                    segmentPoints++;\r\n                }\r\n            });\r\n\r\n            // Calculate segment visibility percentage\r\n            const visibilityThreshold = 0.3; // Consider segment visible if 30% of points are visible\r\n            const visibilityPercentage = visiblePoints / points.length;\r\n\r\n            // Only include segment if enough points are visible\r\n            if (visibilityPercentage > visibilityThreshold && segmentPoints > 0) {\r\n                segmentAccuracies[segment] = {\r\n                    accuracy: (segmentTotal / segmentPoints) * 100,\r\n                    visibility: visibilityPercentage\r\n                };\r\n                visibleSegments++;\r\n            }\r\n        }\r\n\r\n        // If no segments are visible, return 0\r\n        if (visibleSegments === 0) return 0;\r\n\r\n        // Calculate weighted average of visible segment accuracies\r\n        let totalAccuracy = 0;\r\n        for (const segmentData of Object.values(segmentAccuracies)) {\r\n            totalAccuracy += segmentData.accuracy;\r\n        }\r\n\r\n        // Return average accuracy of visible segments\r\n        return Math.round(totalAccuracy / visibleSegments);\r\n    };\r\n\r\n    const onResults = useCallback((results) => {\r\n        if (!canvasRef.current || !results.poseLandmarks) return;\r\n\r\n        const canvasElement = canvasRef.current;\r\n        const canvasCtx = canvasElement.getContext('2d');\r\n        const videoWidth = webcamRef.current.video.videoWidth;\r\n        const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n        // Set canvas dimensions to match video\r\n        canvasElement.width = videoWidth;\r\n        canvasElement.height = videoHeight;\r\n\r\n        // Calculate pose accuracy if we have a selected pose\r\n        if (selectedPose) {\r\n            const accuracy = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\r\n            setPoseAccuracy(accuracy);\r\n        }\r\n\r\n        // Clear canvas\r\n        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\r\n\r\n        // Draw pose landmarks\r\n        if (results.poseLandmarks) {\r\n            // Draw the pose landmarks\r\n            canvasCtx.save();\r\n            canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\r\n\r\n            // Mirror the canvas context\r\n            canvasCtx.scale(-1, 1);\r\n            canvasCtx.translate(-videoWidth, 0);\r\n\r\n            // Draw connectors\r\n            canvasCtx.lineWidth = 3;\r\n\r\n            // Draw pose connections\r\n            function drawConnection(landmarks, start, end, color) {\r\n                const startPoint = landmarks[start];\r\n                const endPoint = landmarks[end];\r\n\r\n                if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\r\n                    canvasCtx.beginPath();\r\n                    canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\r\n                    canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\r\n                    canvasCtx.strokeStyle = color;\r\n                    canvasCtx.stroke();\r\n                }\r\n            }\r\n\r\n            const landmarks = results.poseLandmarks;\r\n\r\n            // Draw body parts with different colors\r\n            // Upper body (green)\r\n            const upperBodyColor = '#00FF00';\r\n            drawConnection(landmarks, 11, 12, upperBodyColor); // shoulders\r\n            drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\r\n            drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\r\n            drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\r\n            drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\r\n\r\n            // Head (red)\r\n            const headColor = '#FF0000';\r\n            drawConnection(landmarks, 0, 1, headColor);\r\n            drawConnection(landmarks, 1, 2, headColor);\r\n            drawConnection(landmarks, 2, 3, headColor);\r\n            drawConnection(landmarks, 3, 7, headColor);\r\n            drawConnection(landmarks, 0, 4, headColor);\r\n            drawConnection(landmarks, 4, 5, headColor);\r\n            drawConnection(landmarks, 5, 6, headColor);\r\n            drawConnection(landmarks, 6, 8, headColor);\r\n\r\n            // Torso (blue)\r\n            const torsoColor = '#0000FF';\r\n            drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\r\n            drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\r\n            drawConnection(landmarks, 23, 24, torsoColor); // hips\r\n\r\n            // Lower body (yellow)\r\n            const lowerBodyColor = '#FFFF00';\r\n            drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\r\n            drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\r\n            drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\r\n            drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\r\n\r\n            // Draw landmarks\r\n            landmarks.forEach((landmark, index) => {\r\n                if (landmark.visibility > 0.5) {\r\n                    canvasCtx.beginPath();\r\n                    canvasCtx.arc(\r\n                        landmark.x * videoWidth,\r\n                        landmark.y * videoHeight,\r\n                        5,\r\n                        0,\r\n                        2 * Math.PI\r\n                    );\r\n                    canvasCtx.fillStyle = '#FFFFFF';\r\n                    canvasCtx.fill();\r\n                    canvasCtx.strokeStyle = '#000000';\r\n                    canvasCtx.stroke();\r\n                }\r\n            });\r\n\r\n            canvasCtx.restore();\r\n        }\r\n    }, [selectedPose]);\r\n\r\n    useEffect(() => {\r\n        let pose = null;\r\n        let camera = null;\r\n\r\n        const initializePose = async () => {\r\n            try {\r\n                pose = new Pose({\r\n                    locateFile: (file) => {\r\n                        return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\r\n                    }\r\n                });\r\n\r\n                pose.setOptions({\r\n                    modelComplexity: 1,\r\n                    smoothLandmarks: true,\r\n                    enableSegmentation: false,\r\n                    smoothSegmentation: false,\r\n                    minDetectionConfidence: 0.5,\r\n                    minTrackingConfidence: 0.5\r\n                });\r\n\r\n                pose.onResults(onResults);\r\n\r\n                if (webcamRef.current && webcamRef.current.video) {\r\n                    camera = new Camera(webcamRef.current.video, {\r\n                        onFrame: async () => {\r\n                            if (webcamRef.current && webcamRef.current.video) {\r\n                                await pose.send({ image: webcamRef.current.video });\r\n                            }\r\n                        },\r\n                        width: 640,\r\n                        height: 480\r\n                    });\r\n\r\n                    camera.start();\r\n                    setIsLoading(false);\r\n                }\r\n            } catch (err) {\r\n                console.error('Error initializing pose detection:', err);\r\n                setError('Failed to initialize pose detection. Please try refreshing the page.');\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        initializePose();\r\n\r\n        return () => {\r\n            if (camera) {\r\n                camera.stop();\r\n            }\r\n            if (pose) {\r\n                pose.close();\r\n            }\r\n        };\r\n    }, [onResults]);\r\n\r\n    return (\r\n        <div className=\"pose-tracker\">\r\n            {isLoading && (\r\n                <div className=\"loading\">\r\n                    <p>Loading pose detector... Please wait a moment.</p>\r\n                    <p style={{ fontSize: '0.9em', color: '#666' }}>\r\n                        This may take a few seconds to initialize.\r\n                    </p>\r\n                </div>\r\n            )}\r\n            {error && (\r\n                <div className=\"error\">\r\n                    <p>{error}</p>\r\n                    <button\r\n                        onClick={() => window.location.reload()}\r\n                        style={{\r\n                            marginTop: '10px',\r\n                            padding: '8px 16px',\r\n                            backgroundColor: '#4CAF50',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '4px',\r\n                            cursor: 'pointer',\r\n                        }}\r\n                    >\r\n                        Retry\r\n                    </button>\r\n                </div>\r\n            )}\r\n            <div className=\"camera-container\">\r\n                <Webcam\r\n                    ref={webcamRef}\r\n                    className=\"webcam\"\r\n                    mirrored={true}\r\n                    videoConstraints={videoConstraints}\r\n                />\r\n                <canvas ref={canvasRef} className=\"pose-canvas\" />\r\n                {selectedPose && (\r\n                    <div className=\"accuracy-display\" style={{\r\n                        position: 'absolute',\r\n                        top: '20px',\r\n                        left: '20px',\r\n                        background: 'rgba(0, 0, 0, 0.7)',\r\n                        color: 'white',\r\n                        padding: '10px',\r\n                        borderRadius: '5px',\r\n                        fontSize: '1.2em'\r\n                    }}>\r\n                        Pose Accuracy: {poseAccuracy}%\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PoseTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}