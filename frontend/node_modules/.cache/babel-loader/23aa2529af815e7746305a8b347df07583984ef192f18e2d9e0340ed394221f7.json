{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Quant\\\\Documents\\\\Programming\\\\Projects\\\\Hackathon\\\\MakeUofT\\\\frontend\\\\src\\\\components\\\\PoseTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTracker = ({\n  userPreferences\n}) => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const poseRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [poseAccuracy, setPoseAccuracy] = useState(0);\n  const [segmentAccuracies, setSegmentAccuracies] = useState({});\n  const [poseFeedback, setPoseFeedback] = useState('');\n  const [wsConnection, setWsConnection] = useState(null);\n  const [selectedPose, setSelectedPose] = useState(null);\n  const videoConstraints = {\n    width: 640,\n    height: 480,\n    facingMode: 'user'\n  };\n  const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n    if (!targetPose || !userLandmarks) {\n      console.log('Missing landmarks or target pose');\n      return {\n        total: 0,\n        segments: {}\n      };\n    }\n\n    // Define body segments with their corresponding landmark indices\n    const bodySegments = {\n      head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      upperBody: [11, 12, 13, 14, 15, 16],\n      // shoulders, elbows, wrists\n      torso: [11, 12, 23, 24],\n      // shoulders to hips\n      lowerBody: [23, 24, 25, 26, 27, 28] // hips, knees, ankles\n    };\n\n    // Define key points that must be visible for each segment\n    const requiredPoints = {\n      head: [0],\n      // Only require nose\n      upperBody: [11, 12],\n      // Shoulders\n      torso: [11, 24],\n      // One shoulder and opposite hip\n      lowerBody: [24, 26] // One hip and opposite knee\n    };\n\n    // Helper function to normalize pose relative to height\n    const normalizePose = landmarks => {\n      // Find the topmost and bottommost visible points\n      let minY = Number.MAX_VALUE;\n      let maxY = Number.MIN_VALUE;\n      let minX = Number.MAX_VALUE;\n      let maxX = Number.MIN_VALUE;\n      landmarks.forEach(landmark => {\n        if (landmark.visibility > 0.3) {\n          minY = Math.min(minY, landmark.y);\n          maxY = Math.max(maxY, landmark.y);\n          minX = Math.min(minX, landmark.x);\n          maxX = Math.max(maxX, landmark.x);\n        }\n      });\n      const height = maxY - minY;\n      const width = maxX - minX;\n      const centerX = (minX + maxX) / 2;\n      const centerY = (minY + maxY) / 2;\n      if (height === 0 || width === 0) return landmarks;\n      return landmarks.map(landmark => ({\n        x: (landmark.x - centerX) / width,\n        y: (landmark.y - centerY) / height,\n        visibility: landmark.visibility\n      }));\n    };\n\n    // Normalize both poses\n    const normalizedUser = normalizePose(userLandmarks);\n    const normalizedTarget = normalizePose(targetPose.landmarks);\n    let segmentAccuracies = {};\n    let visibleSegments = 0;\n\n    // Calculate accuracy for each body segment\n    for (const [segment, points] of Object.entries(bodySegments)) {\n      // Check if required points are visible\n      const requiredVisible = requiredPoints[segment].every(index => {\n        const userPoint = normalizedUser[index];\n        const targetPoint = normalizedTarget[index];\n        return userPoint.visibility > 0.3 && targetPoint.visibility > 0.3;\n      });\n      if (!requiredVisible) continue;\n      let segmentTotal = 0;\n      let segmentPoints = 0;\n\n      // Calculate accuracies for points\n      points.forEach(index => {\n        const userLandmark = normalizedUser[index];\n        const targetLandmark = normalizedTarget[index];\n\n        // Lower visibility threshold for legs\n        const visibilityThreshold = segment === 'lowerBody' ? 0.3 : 0.4;\n        if (userLandmark.visibility > visibilityThreshold && targetLandmark.visibility > visibilityThreshold) {\n          // Calculate position difference\n          const distance = Math.sqrt(Math.pow(userLandmark.x - targetLandmark.x, 2) + Math.pow(userLandmark.y - targetLandmark.y, 2));\n\n          // Calculate relative angle to center\n          const userAngle = Math.atan2(userLandmark.y, userLandmark.x);\n          const targetAngle = Math.atan2(targetLandmark.y, targetLandmark.x);\n          const angleDiff = Math.abs(userAngle - targetAngle);\n\n          // Adjust weights based on segment\n          let angleWeight = 0.5;\n          let distanceWeight = 0.5;\n          if (segment === 'lowerBody') {\n            angleWeight = 0.7; // More emphasis on angle for legs\n            distanceWeight = 0.3;\n          }\n\n          // Calculate point accuracy\n          const angleAccuracy = Math.max(0, 1 - angleDiff / Math.PI);\n          const distanceAccuracy = Math.max(0, 1 - distance / 1.0); // Increased tolerance\n          const pointAccuracy = angleAccuracy * angleWeight + distanceAccuracy * distanceWeight;\n\n          // Add to segment total with visibility weight\n          const weight = Math.min(userLandmark.visibility, targetLandmark.visibility);\n          segmentTotal += pointAccuracy * weight;\n          segmentPoints += weight;\n        }\n      });\n\n      // Calculate segment accuracy if we have points\n      if (segmentPoints > 0) {\n        const rawAccuracy = segmentTotal / segmentPoints * 100;\n        segmentAccuracies[segment] = {\n          accuracy: Math.min(100, Math.max(0, rawAccuracy)),\n          visibility: segmentPoints / points.length\n        };\n        visibleSegments++;\n      }\n    }\n\n    // Calculate overall accuracy with adjusted weights\n    if (visibleSegments === 0) return {\n      total: 0,\n      segments: {}\n    };\n    let totalAccuracy = 0;\n    let totalWeight = 0;\n    const segmentWeights = {\n      head: 0.8,\n      upperBody: 1.0,\n      torso: 1.0,\n      lowerBody: 1.2\n    };\n    for (const [segment, data] of Object.entries(segmentAccuracies)) {\n      const weight = segmentWeights[segment] * Math.pow(data.visibility, 0.5); // Sqrt to reduce penalty of low visibility\n      totalAccuracy += data.accuracy * weight;\n      totalWeight += weight;\n    }\n    return {\n      total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n      segments: segmentAccuracies\n    };\n  };\n  const onResults = useCallback(results => {\n    if (!canvasRef.current || !results.poseLandmarks) return;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext('2d');\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas dimensions to match video\n    canvasElement.width = videoWidth;\n    canvasElement.height = videoHeight;\n\n    // Calculate pose accuracy if we have a selected pose\n    if (selectedPose && selectedPose.landmarks) {\n      const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n      setPoseAccuracy(accuracyData.total);\n      setSegmentAccuracies(accuracyData.segments);\n    }\n\n    // Clear canvas\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    // Draw pose landmarks\n    if (results.poseLandmarks) {\n      // Save the current context state\n      canvasCtx.save();\n\n      // Clear the canvas\n      canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n      // Mirror the context\n      canvasCtx.scale(-1, 1);\n      canvasCtx.translate(-videoWidth, 0);\n\n      // Draw pose connections\n      function drawConnection(landmarks, start, end, color) {\n        const startPoint = landmarks[start];\n        const endPoint = landmarks[end];\n        if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n          canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n          canvasCtx.strokeStyle = color;\n          canvasCtx.lineWidth = 3;\n          canvasCtx.stroke();\n        }\n      }\n      const landmarks = results.poseLandmarks;\n\n      // Draw body parts with different colors\n      // Upper body (green)\n      const upperBodyColor = '#00FF00';\n      drawConnection(landmarks, 12, 11, upperBodyColor); // shoulders\n      drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n      drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n      drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n      drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n\n      // Head (red)\n      const headColor = '#FF0000';\n      drawConnection(landmarks, 0, 4, headColor);\n      drawConnection(landmarks, 4, 5, headColor);\n      drawConnection(landmarks, 5, 6, headColor);\n      drawConnection(landmarks, 6, 8, headColor);\n      drawConnection(landmarks, 0, 1, headColor);\n      drawConnection(landmarks, 1, 2, headColor);\n      drawConnection(landmarks, 2, 3, headColor);\n      drawConnection(landmarks, 3, 7, headColor);\n\n      // Torso (blue)\n      const torsoColor = '#0000FF';\n      drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n      drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n      drawConnection(landmarks, 24, 23, torsoColor); // hips\n\n      // Lower body (yellow)\n      const lowerBodyColor = '#FFFF00';\n      drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n      drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n      drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n      drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n\n      // Draw landmarks\n      landmarks.forEach(landmark => {\n        if (landmark.visibility > 0.5) {\n          canvasCtx.beginPath();\n          canvasCtx.arc(landmark.x * videoWidth, landmark.y * videoHeight, 5, 0, 2 * Math.PI);\n          canvasCtx.fillStyle = '#FFFFFF';\n          canvasCtx.fill();\n          canvasCtx.strokeStyle = '#000000';\n          canvasCtx.stroke();\n        }\n      });\n\n      // Restore the context state\n      canvasCtx.restore();\n    }\n  }, [selectedPose]);\n  useEffect(() => {\n    let pose = null;\n    let camera = null;\n    const initializePose = async () => {\n      try {\n        // Create pose detector with updated initialization\n        pose = new Pose({\n          locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.5.1675469404/${file}`;\n          }\n        });\n\n        // Configure pose detection - set selfieMode to false to prevent double mirroring\n        await pose.setOptions({\n          modelComplexity: 1,\n          smoothLandmarks: true,\n          minDetectionConfidence: 0.5,\n          minTrackingConfidence: 0.5,\n          selfieMode: false // Changed to false to prevent double mirroring\n        });\n\n        // Set up result handler\n        await pose.onResults(onResults);\n\n        // Initialize camera after pose is ready\n        if (webcamRef.current && webcamRef.current.video) {\n          camera = new Camera(webcamRef.current.video, {\n            onFrame: async () => {\n              try {\n                if (webcamRef.current && webcamRef.current.video) {\n                  await pose.send({\n                    image: webcamRef.current.video\n                  });\n                }\n              } catch (err) {\n                console.error('Error in camera frame processing:', err);\n              }\n            },\n            width: 640,\n            height: 480\n          });\n          await camera.start();\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Error initializing pose detection:', err);\n        setError('Failed to initialize pose detection. Please try refreshing the page.');\n        setIsLoading(false);\n      }\n    };\n\n    // Initialize pose detection\n    initializePose();\n\n    // Cleanup function\n    return () => {\n      if (camera) {\n        camera.stop();\n      }\n      if (pose) {\n        pose.close();\n      }\n    };\n  }, [onResults]);\n  useEffect(() => {\n    // Initialize WebSocket connection\n    const ws = new WebSocket('ws://localhost:8000/ws/pose-feedback');\n    ws.onopen = () => {\n      console.log('Connected to feedback server');\n      setWsConnection(ws);\n    };\n    ws.onmessage = event => {\n      setPoseFeedback(event.data);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Send pose data to backend when accuracy updates\n  useEffect(() => {\n    if (wsConnection && selectedPose && Object.keys(segmentAccuracies).length > 0) {\n      const poseData = {\n        pose_name: selectedPose.name || 'unknown pose',\n        overall_accuracy: poseAccuracy,\n        segment_accuracies: segmentAccuracies\n      };\n      wsConnection.send(JSON.stringify(poseData));\n    }\n  }, [poseAccuracy, segmentAccuracies, selectedPose, wsConnection]);\n\n  // Load initial pose based on user preferences\n  useEffect(() => {\n    const loadPose = async () => {\n      try {\n        const response = await fetch('/pose_results/tree-pose_pose.json');\n        if (!response.ok) {\n          throw new Error('Failed to load pose data');\n        }\n        const poseData = await response.json();\n        setSelectedPose(poseData);\n      } catch (err) {\n        console.error('Error loading pose data:', err);\n        setError('Failed to load pose data. Please try refreshing the page.');\n      }\n    };\n    if (userPreferences) {\n      loadPose();\n    }\n  }, [userPreferences]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pose-tracker\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading pose detector... Please wait a moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '0.9em',\n          color: '#666'\n        },\n        children: \"This may take a few seconds to initialize.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"retry-button\",\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-container\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        className: \"webcam\",\n        mirrored: true,\n        videoConstraints: videoConstraints\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"pose-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          background: 'rgba(0,0,0,0.7)',\n          color: 'white',\n          padding: '10px',\n          fontSize: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Selected Pose: \", selectedPose ? 'Loaded' : 'Not Loaded']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Landmarks: \", selectedPose !== null && selectedPose !== void 0 && selectedPose.landmarks ? 'Present' : 'Missing']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Segments: \", Object.keys(segmentAccuracies).length, \" detected\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accuracy-display\",\n        style: {\n          position: 'absolute',\n          top: '10px',\n          right: '10px',\n          background: 'rgba(0,0,0,0.7)',\n          color: 'white',\n          padding: '15px',\n          borderRadius: '5px',\n          minWidth: '200px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accuracy-overall\",\n          style: {\n            fontSize: '18px',\n            marginBottom: '10px'\n          },\n          children: [\"Overall Accuracy: \", poseAccuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accuracy-segments\",\n          children: Object.entries(segmentAccuracies).map(([segment, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accuracy-segment\",\n            style: {\n              marginBottom: '5px',\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [segment.charAt(0).toUpperCase() + segment.slice(1), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [Math.round(data.accuracy), \"% (\", (data.visibility * 100).toFixed(0), \"% visible)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 33\n            }, this)]\n          }, segment, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 21\n        }, this), Object.keys(segmentAccuracies).length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#ff9999',\n            marginTop: '10px'\n          },\n          children: \"No segments detected. Make sure your full body is visible in the camera.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 25\n        }, this), poseFeedback && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pose-feedback\",\n          style: {\n            marginTop: '15px',\n            borderTop: '1px solid rgba(255,255,255,0.3)',\n            paddingTop: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feedback-title\",\n            style: {\n              fontWeight: 'bold',\n              marginBottom: '5px'\n            },\n            children: \"Instructor Feedback:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 29\n          }, this), poseFeedback]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 9\n  }, this);\n};\n_s(PoseTracker, \"UPUgzfvZ4MGJ/HGo+qhKPoMEQME=\");\n_c = PoseTracker;\nexport default PoseTracker;\nvar _c;\n$RefreshReg$(_c, \"PoseTracker\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Webcam","Camera","Pose","jsxDEV","_jsxDEV","PoseTracker","userPreferences","_s","webcamRef","canvasRef","poseRef","isLoading","setIsLoading","error","setError","poseAccuracy","setPoseAccuracy","segmentAccuracies","setSegmentAccuracies","poseFeedback","setPoseFeedback","wsConnection","setWsConnection","selectedPose","setSelectedPose","videoConstraints","width","height","facingMode","calculatePoseAccuracy","userLandmarks","targetPose","console","log","total","segments","bodySegments","head","upperBody","torso","lowerBody","requiredPoints","normalizePose","landmarks","minY","Number","MAX_VALUE","maxY","MIN_VALUE","minX","maxX","forEach","landmark","visibility","Math","min","y","max","x","centerX","centerY","map","normalizedUser","normalizedTarget","visibleSegments","segment","points","Object","entries","requiredVisible","every","index","userPoint","targetPoint","segmentTotal","segmentPoints","userLandmark","targetLandmark","visibilityThreshold","distance","sqrt","pow","userAngle","atan2","targetAngle","angleDiff","abs","angleWeight","distanceWeight","angleAccuracy","PI","distanceAccuracy","pointAccuracy","weight","rawAccuracy","accuracy","length","totalAccuracy","totalWeight","segmentWeights","data","round","onResults","results","current","poseLandmarks","canvasElement","canvasCtx","getContext","videoWidth","video","videoHeight","accuracyData","clearRect","save","scale","translate","drawConnection","start","end","color","startPoint","endPoint","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","upperBodyColor","headColor","torsoColor","lowerBodyColor","arc","fillStyle","fill","restore","pose","camera","initializePose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","minDetectionConfidence","minTrackingConfidence","selfieMode","onFrame","send","image","err","stop","close","ws","WebSocket","onopen","onmessage","event","onerror","keys","poseData","pose_name","name","overall_accuracy","segment_accuracies","JSON","stringify","loadPose","response","fetch","ok","Error","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","onClick","window","location","reload","ref","mirrored","position","top","left","background","padding","right","borderRadius","minWidth","marginBottom","display","justifyContent","charAt","toUpperCase","slice","toFixed","marginTop","borderTop","paddingTop","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/Quant/Documents/Programming/Projects/Hackathon/MakeUofT/frontend/src/components/PoseTracker.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { Pose } from '@mediapipe/pose';\nimport './PoseTracker.css';\n\nconst PoseTracker = ({ userPreferences }) => {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n    const poseRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [poseAccuracy, setPoseAccuracy] = useState(0);\n    const [segmentAccuracies, setSegmentAccuracies] = useState({});\n    const [poseFeedback, setPoseFeedback] = useState('');\n    const [wsConnection, setWsConnection] = useState(null);\n    const [selectedPose, setSelectedPose] = useState(null);\n\n    const videoConstraints = {\n        width: 640,\n        height: 480,\n        facingMode: 'user',\n    };\n\n    const calculatePoseAccuracy = (userLandmarks, targetPose) => {\n        if (!targetPose || !userLandmarks) {\n            console.log('Missing landmarks or target pose');\n            return { total: 0, segments: {} };\n        }\n\n        // Define body segments with their corresponding landmark indices\n        const bodySegments = {\n            head: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            upperBody: [11, 12, 13, 14, 15, 16], // shoulders, elbows, wrists\n            torso: [11, 12, 23, 24], // shoulders to hips\n            lowerBody: [23, 24, 25, 26, 27, 28] // hips, knees, ankles\n        };\n\n        // Define key points that must be visible for each segment\n        const requiredPoints = {\n            head: [0], // Only require nose\n            upperBody: [11, 12], // Shoulders\n            torso: [11, 24], // One shoulder and opposite hip\n            lowerBody: [24, 26] // One hip and opposite knee\n        };\n\n        // Helper function to normalize pose relative to height\n        const normalizePose = (landmarks) => {\n            // Find the topmost and bottommost visible points\n            let minY = Number.MAX_VALUE;\n            let maxY = Number.MIN_VALUE;\n            let minX = Number.MAX_VALUE;\n            let maxX = Number.MIN_VALUE;\n\n            landmarks.forEach(landmark => {\n                if (landmark.visibility > 0.3) {\n                    minY = Math.min(minY, landmark.y);\n                    maxY = Math.max(maxY, landmark.y);\n                    minX = Math.min(minX, landmark.x);\n                    maxX = Math.max(maxX, landmark.x);\n                }\n            });\n\n            const height = maxY - minY;\n            const width = maxX - minX;\n            const centerX = (minX + maxX) / 2;\n            const centerY = (minY + maxY) / 2;\n\n            if (height === 0 || width === 0) return landmarks;\n\n            return landmarks.map(landmark => ({\n                x: (landmark.x - centerX) / width,\n                y: (landmark.y - centerY) / height,\n                visibility: landmark.visibility\n            }));\n        };\n\n        // Normalize both poses\n        const normalizedUser = normalizePose(userLandmarks);\n        const normalizedTarget = normalizePose(targetPose.landmarks);\n\n        let segmentAccuracies = {};\n        let visibleSegments = 0;\n\n        // Calculate accuracy for each body segment\n        for (const [segment, points] of Object.entries(bodySegments)) {\n            // Check if required points are visible\n            const requiredVisible = requiredPoints[segment].every(index => {\n                const userPoint = normalizedUser[index];\n                const targetPoint = normalizedTarget[index];\n                return userPoint.visibility > 0.3 && targetPoint.visibility > 0.3;\n            });\n\n            if (!requiredVisible) continue;\n\n            let segmentTotal = 0;\n            let segmentPoints = 0;\n\n            // Calculate accuracies for points\n            points.forEach(index => {\n                const userLandmark = normalizedUser[index];\n                const targetLandmark = normalizedTarget[index];\n\n                // Lower visibility threshold for legs\n                const visibilityThreshold = segment === 'lowerBody' ? 0.3 : 0.4;\n\n                if (userLandmark.visibility > visibilityThreshold && targetLandmark.visibility > visibilityThreshold) {\n                    // Calculate position difference\n                    const distance = Math.sqrt(\n                        Math.pow(userLandmark.x - targetLandmark.x, 2) +\n                        Math.pow(userLandmark.y - targetLandmark.y, 2)\n                    );\n\n                    // Calculate relative angle to center\n                    const userAngle = Math.atan2(userLandmark.y, userLandmark.x);\n                    const targetAngle = Math.atan2(targetLandmark.y, targetLandmark.x);\n                    const angleDiff = Math.abs(userAngle - targetAngle);\n\n                    // Adjust weights based on segment\n                    let angleWeight = 0.5;\n                    let distanceWeight = 0.5;\n\n                    if (segment === 'lowerBody') {\n                        angleWeight = 0.7;  // More emphasis on angle for legs\n                        distanceWeight = 0.3;\n                    }\n\n                    // Calculate point accuracy\n                    const angleAccuracy = Math.max(0, 1 - (angleDiff / Math.PI));\n                    const distanceAccuracy = Math.max(0, 1 - (distance / 1.0)); // Increased tolerance\n                    const pointAccuracy = (angleAccuracy * angleWeight + distanceAccuracy * distanceWeight);\n\n                    // Add to segment total with visibility weight\n                    const weight = Math.min(userLandmark.visibility, targetLandmark.visibility);\n                    segmentTotal += pointAccuracy * weight;\n                    segmentPoints += weight;\n                }\n            });\n\n            // Calculate segment accuracy if we have points\n            if (segmentPoints > 0) {\n                const rawAccuracy = (segmentTotal / segmentPoints) * 100;\n                segmentAccuracies[segment] = {\n                    accuracy: Math.min(100, Math.max(0, rawAccuracy)),\n                    visibility: segmentPoints / points.length\n                };\n                visibleSegments++;\n            }\n        }\n\n        // Calculate overall accuracy with adjusted weights\n        if (visibleSegments === 0) return { total: 0, segments: {} };\n\n        let totalAccuracy = 0;\n        let totalWeight = 0;\n\n        const segmentWeights = {\n            head: 0.8,\n            upperBody: 1.0,\n            torso: 1.0,\n            lowerBody: 1.2\n        };\n\n        for (const [segment, data] of Object.entries(segmentAccuracies)) {\n            const weight = segmentWeights[segment] * Math.pow(data.visibility, 0.5); // Sqrt to reduce penalty of low visibility\n            totalAccuracy += data.accuracy * weight;\n            totalWeight += weight;\n        }\n\n        return {\n            total: Math.round(totalWeight > 0 ? totalAccuracy / totalWeight : 0),\n            segments: segmentAccuracies\n        };\n    };\n\n    const onResults = useCallback((results) => {\n        if (!canvasRef.current || !results.poseLandmarks) return;\n\n        const canvasElement = canvasRef.current;\n        const canvasCtx = canvasElement.getContext('2d');\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight;\n\n        // Set canvas dimensions to match video\n        canvasElement.width = videoWidth;\n        canvasElement.height = videoHeight;\n\n        // Calculate pose accuracy if we have a selected pose\n        if (selectedPose && selectedPose.landmarks) {\n            const accuracyData = calculatePoseAccuracy(results.poseLandmarks, selectedPose);\n            setPoseAccuracy(accuracyData.total);\n            setSegmentAccuracies(accuracyData.segments);\n        }\n\n        // Clear canvas\n        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n        // Draw pose landmarks\n        if (results.poseLandmarks) {\n            // Save the current context state\n            canvasCtx.save();\n\n            // Clear the canvas\n            canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n            // Mirror the context\n            canvasCtx.scale(-1, 1);\n            canvasCtx.translate(-videoWidth, 0);\n\n            // Draw pose connections\n            function drawConnection(landmarks, start, end, color) {\n                const startPoint = landmarks[start];\n                const endPoint = landmarks[end];\n\n                if (startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n                    canvasCtx.beginPath();\n                    canvasCtx.moveTo(startPoint.x * videoWidth, startPoint.y * videoHeight);\n                    canvasCtx.lineTo(endPoint.x * videoWidth, endPoint.y * videoHeight);\n                    canvasCtx.strokeStyle = color;\n                    canvasCtx.lineWidth = 3;\n                    canvasCtx.stroke();\n                }\n            }\n\n            const landmarks = results.poseLandmarks;\n\n            // Draw body parts with different colors\n            // Upper body (green)\n            const upperBodyColor = '#00FF00';\n            drawConnection(landmarks, 12, 11, upperBodyColor); // shoulders\n            drawConnection(landmarks, 12, 14, upperBodyColor); // right upper arm\n            drawConnection(landmarks, 14, 16, upperBodyColor); // right lower arm\n            drawConnection(landmarks, 11, 13, upperBodyColor); // left upper arm\n            drawConnection(landmarks, 13, 15, upperBodyColor); // left lower arm\n\n            // Head (red)\n            const headColor = '#FF0000';\n            drawConnection(landmarks, 0, 4, headColor);\n            drawConnection(landmarks, 4, 5, headColor);\n            drawConnection(landmarks, 5, 6, headColor);\n            drawConnection(landmarks, 6, 8, headColor);\n            drawConnection(landmarks, 0, 1, headColor);\n            drawConnection(landmarks, 1, 2, headColor);\n            drawConnection(landmarks, 2, 3, headColor);\n            drawConnection(landmarks, 3, 7, headColor);\n\n            // Torso (blue)\n            const torsoColor = '#0000FF';\n            drawConnection(landmarks, 12, 24, torsoColor); // right shoulder to hip\n            drawConnection(landmarks, 11, 23, torsoColor); // left shoulder to hip\n            drawConnection(landmarks, 24, 23, torsoColor); // hips\n\n            // Lower body (yellow)\n            const lowerBodyColor = '#FFFF00';\n            drawConnection(landmarks, 24, 26, lowerBodyColor); // right hip to knee\n            drawConnection(landmarks, 26, 28, lowerBodyColor); // right knee to ankle\n            drawConnection(landmarks, 23, 25, lowerBodyColor); // left hip to knee\n            drawConnection(landmarks, 25, 27, lowerBodyColor); // left knee to ankle\n\n            // Draw landmarks\n            landmarks.forEach((landmark) => {\n                if (landmark.visibility > 0.5) {\n                    canvasCtx.beginPath();\n                    canvasCtx.arc(\n                        landmark.x * videoWidth,\n                        landmark.y * videoHeight,\n                        5,\n                        0,\n                        2 * Math.PI\n                    );\n                    canvasCtx.fillStyle = '#FFFFFF';\n                    canvasCtx.fill();\n                    canvasCtx.strokeStyle = '#000000';\n                    canvasCtx.stroke();\n                }\n            });\n\n            // Restore the context state\n            canvasCtx.restore();\n        }\n    }, [selectedPose]);\n\n    useEffect(() => {\n        let pose = null;\n        let camera = null;\n\n        const initializePose = async () => {\n            try {\n                // Create pose detector with updated initialization\n                pose = new Pose({\n                    locateFile: (file) => {\n                        return `https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.5.1675469404/${file}`;\n                    }\n                });\n\n                // Configure pose detection - set selfieMode to false to prevent double mirroring\n                await pose.setOptions({\n                    modelComplexity: 1,\n                    smoothLandmarks: true,\n                    minDetectionConfidence: 0.5,\n                    minTrackingConfidence: 0.5,\n                    selfieMode: false  // Changed to false to prevent double mirroring\n                });\n\n                // Set up result handler\n                await pose.onResults(onResults);\n\n                // Initialize camera after pose is ready\n                if (webcamRef.current && webcamRef.current.video) {\n                    camera = new Camera(webcamRef.current.video, {\n                        onFrame: async () => {\n                            try {\n                                if (webcamRef.current && webcamRef.current.video) {\n                                    await pose.send({ image: webcamRef.current.video });\n                                }\n                            } catch (err) {\n                                console.error('Error in camera frame processing:', err);\n                            }\n                        },\n                        width: 640,\n                        height: 480\n                    });\n\n                    await camera.start();\n                    setIsLoading(false);\n                }\n            } catch (err) {\n                console.error('Error initializing pose detection:', err);\n                setError('Failed to initialize pose detection. Please try refreshing the page.');\n                setIsLoading(false);\n            }\n        };\n\n        // Initialize pose detection\n        initializePose();\n\n        // Cleanup function\n        return () => {\n            if (camera) {\n                camera.stop();\n            }\n            if (pose) {\n                pose.close();\n            }\n        };\n    }, [onResults]);\n\n    useEffect(() => {\n        // Initialize WebSocket connection\n        const ws = new WebSocket('ws://localhost:8000/ws/pose-feedback');\n\n        ws.onopen = () => {\n            console.log('Connected to feedback server');\n            setWsConnection(ws);\n        };\n\n        ws.onmessage = (event) => {\n            setPoseFeedback(event.data);\n        };\n\n        ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n\n        return () => {\n            if (ws) {\n                ws.close();\n            }\n        };\n    }, []);\n\n    // Send pose data to backend when accuracy updates\n    useEffect(() => {\n        if (wsConnection && selectedPose && Object.keys(segmentAccuracies).length > 0) {\n            const poseData = {\n                pose_name: selectedPose.name || 'unknown pose',\n                overall_accuracy: poseAccuracy,\n                segment_accuracies: segmentAccuracies\n            };\n            wsConnection.send(JSON.stringify(poseData));\n        }\n    }, [poseAccuracy, segmentAccuracies, selectedPose, wsConnection]);\n\n    // Load initial pose based on user preferences\n    useEffect(() => {\n        const loadPose = async () => {\n            try {\n                const response = await fetch('/pose_results/tree-pose_pose.json');\n                if (!response.ok) {\n                    throw new Error('Failed to load pose data');\n                }\n                const poseData = await response.json();\n                setSelectedPose(poseData);\n            } catch (err) {\n                console.error('Error loading pose data:', err);\n                setError('Failed to load pose data. Please try refreshing the page.');\n            }\n        };\n\n        if (userPreferences) {\n            loadPose();\n        }\n    }, [userPreferences]);\n\n    return (\n        <div className=\"pose-tracker\">\n            {isLoading && (\n                <div className=\"loading\">\n                    <p>Loading pose detector... Please wait a moment.</p>\n                    <p style={{ fontSize: '0.9em', color: '#666' }}>\n                        This may take a few seconds to initialize.\n                    </p>\n                </div>\n            )}\n            {error && (\n                <div className=\"error\">\n                    <p>{error}</p>\n                    <button\n                        onClick={() => window.location.reload()}\n                        className=\"retry-button\"\n                    >\n                        Retry\n                    </button>\n                </div>\n            )}\n            <div className=\"camera-container\">\n                <Webcam\n                    ref={webcamRef}\n                    className=\"webcam\"\n                    mirrored={true}\n                    videoConstraints={videoConstraints}\n                />\n                <canvas ref={canvasRef} className=\"pose-canvas\" />\n\n                {/* Debug information */}\n                <div className=\"debug-info\" style={{ position: 'absolute', top: 0, left: 0, background: 'rgba(0,0,0,0.7)', color: 'white', padding: '10px', fontSize: '12px' }}>\n                    <div>Selected Pose: {selectedPose ? 'Loaded' : 'Not Loaded'}</div>\n                    <div>Landmarks: {selectedPose?.landmarks ? 'Present' : 'Missing'}</div>\n                    <div>Segments: {Object.keys(segmentAccuracies).length} detected</div>\n                </div>\n\n                {/* Accuracy Display - Now always visible */}\n                <div className=\"accuracy-display\" style={{\n                    position: 'absolute',\n                    top: '10px',\n                    right: '10px',\n                    background: 'rgba(0,0,0,0.7)',\n                    color: 'white',\n                    padding: '15px',\n                    borderRadius: '5px',\n                    minWidth: '200px'\n                }}>\n                    <div className=\"accuracy-overall\" style={{ fontSize: '18px', marginBottom: '10px' }}>\n                        Overall Accuracy: {poseAccuracy}%\n                    </div>\n                    <div className=\"accuracy-segments\">\n                        {Object.entries(segmentAccuracies).map(([segment, data]) => (\n                            <div key={segment} className=\"accuracy-segment\" style={{\n                                marginBottom: '5px',\n                                display: 'flex',\n                                justifyContent: 'space-between'\n                            }}>\n                                <span>{segment.charAt(0).toUpperCase() + segment.slice(1)}:</span>\n                                <span>{Math.round(data.accuracy)}% ({(data.visibility * 100).toFixed(0)}% visible)</span>\n                            </div>\n                        ))}\n                    </div>\n                    {Object.keys(segmentAccuracies).length === 0 && (\n                        <div style={{ color: '#ff9999', marginTop: '10px' }}>\n                            No segments detected. Make sure your full body is visible in the camera.\n                        </div>\n                    )}\n                    {poseFeedback && (\n                        <div className=\"pose-feedback\" style={{ marginTop: '15px', borderTop: '1px solid rgba(255,255,255,0.3)', paddingTop: '10px' }}>\n                            <div className=\"feedback-title\" style={{ fontWeight: 'bold', marginBottom: '5px' }}>\n                                Instructor Feedback:\n                            </div>\n                            {poseFeedback}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PoseTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}